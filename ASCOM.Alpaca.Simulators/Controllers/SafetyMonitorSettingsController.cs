//DO NOT EDIT, AUTO-GENORATED
using ASCOM.Common.Alpaca;
using ASCOM.Simulators;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Net.Mime;

namespace ASCOM.Alpaca.Simulators
{
    /// <summary>
    /// Autogenerated DO NOT EDIT
    /// OmniSim only, not part of Alpaca
    /// </summary>
    [ServiceFilter(typeof(AuthorizationFilter))]
    [ApiController]
    [Route("simulator/v1/")]
    public class SafetyMonitorSettingsController : ProcessBaseController
    {
        /// <summary>
        /// OmniSim Only - The delay to be used for Connect() in milliseconds, allowed values are 1-30000
        /// </summary>
        /// <remarks>
        /// <para>The delay to be used for Connect() in milliseconds, allowed values are 1-30000</para>
        /// </remarks>
        /// <param name="DeviceNumber">Zero based device number as set on the server (A uint32 with a range of 0 to 4294967295)</param>
        /// <param name="ClientID">Client's unique ID.</param>
        /// <param name="ClientTransactionID">Client's transaction ID.</param>
        /// <response code="200">Transaction complete or exception</response>
        /// <response code="400" examples="Error message describing why the command cannot be processed">Method or parameter value error, check error message</response>
        /// <response code="500" examples="Error message describing why the command cannot be processed">Server internal error, check error message</response>
        [HttpGet]
        [Produces(MediaTypeNames.Application.Json)]
        [ApiExplorerSettings(GroupName = "OmniSim")]
        [Route("safetymonitor/{DeviceNumber}/connectdelay")]
        public ActionResult<ASCOM.Common.Alpaca.IntResponse> ConnectDelay(
            [Required][DefaultValue(0)][SwaggerSchema(Strings.DeviceIDDescription, Format = "uint32")][Range(0, 4294967295)] uint DeviceNumber,
            [SwaggerSchema(Strings.ClientIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientID = 0,
            [SwaggerSchema(Strings.ClientTransactionIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientTransactionID = 0)
        {
            return ProcessRequest(() => ((DeviceManager.GetSafetyMonitor(DeviceNumber) as ASCOM.Simulators.SafetyMonitor)).ConnectDelay.Value, DeviceManager.ServerTransactionID, ClientID, ClientTransactionID);
        }
        /// <summary>
        /// OmniSim Only - The delay to be used for Connect() in milliseconds, allowed values are 1-30000
        /// </summary>
        /// <remarks>
        /// <para>The delay to be used for Connect() in milliseconds, allowed values are 1-30000</para>
        /// </remarks>
        /// <param name="DeviceNumber">Zero based device number as set on the server (A uint32 with a range of 0 to 4294967295)</param>
        /// <param name="ConnectDelay">The delay to be used for Connect() in milliseconds, allowed values are 1-30000</param>
        /// <param name="ClientID">Client's unique ID.</param>
        /// <param name="ClientTransactionID">Client's transaction ID.</param>
        /// <response code="200">Transaction complete or exception</response>
        /// <response code="400" examples="Error message describing why the command cannot be processed">Method or parameter value error, check error message</response>
        /// <response code="500" examples="Error message describing why the command cannot be processed">Server internal error, check error message</response>
        [HttpPut]
        [Produces(MediaTypeNames.Application.Json)]
        [ApiExplorerSettings(GroupName = "OmniSim")]
        [Route("safetymonitor/{DeviceNumber}/connectdelay")]
        public ActionResult<Response> ConnectDelay(
            [Required][DefaultValue(0)][SwaggerSchema(Strings.DeviceIDDescription, Format = "uint32")][Range(0, 4294967295)] uint DeviceNumber,
            [Required][FromForm][SwaggerSchema("The delay to be used for Connect() in milliseconds, allowed values are 1-30000")] System.Int16 ConnectDelay,
            [FromForm][SwaggerSchema(Strings.ClientIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientID = 0,
            [FromForm][SwaggerSchema(Strings.ClientTransactionIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientTransactionID = 0)
        {
            return ProcessRequest(() => { ((DeviceManager.GetSafetyMonitor(DeviceNumber) as ASCOM.Simulators.SafetyMonitor)).ConnectDelay.Value = ConnectDelay; }, DeviceManager.ServerTransactionID, ClientID, ClientTransactionID, $"ConnectDelay={ConnectDelay}");
        }
        /// <summary>
        /// OmniSim Only - The ASCOM Interface Version, allowed values are 1-3
        /// </summary>
        /// <remarks>
        /// <para>The ASCOM Interface Version, allowed values are 1-3</para>
        /// </remarks>
        /// <param name="DeviceNumber">Zero based device number as set on the server (A uint32 with a range of 0 to 4294967295)</param>
        /// <param name="ClientID">Client's unique ID.</param>
        /// <param name="ClientTransactionID">Client's transaction ID.</param>
        /// <response code="200">Transaction complete or exception</response>
        /// <response code="400" examples="Error message describing why the command cannot be processed">Method or parameter value error, check error message</response>
        /// <response code="500" examples="Error message describing why the command cannot be processed">Server internal error, check error message</response>
        [HttpGet]
        [Produces(MediaTypeNames.Application.Json)]
        [ApiExplorerSettings(GroupName = "OmniSim")]
        [Route("safetymonitor/{DeviceNumber}/interfaceversion")]
        public ActionResult<ASCOM.Common.Alpaca.IntResponse> InterfaceVersion(
            [Required][DefaultValue(0)][SwaggerSchema(Strings.DeviceIDDescription, Format = "uint32")][Range(0, 4294967295)] uint DeviceNumber,
            [SwaggerSchema(Strings.ClientIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientID = 0,
            [SwaggerSchema(Strings.ClientTransactionIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientTransactionID = 0)
        {
            return ProcessRequest(() => ((DeviceManager.GetSafetyMonitor(DeviceNumber) as ASCOM.Simulators.SafetyMonitor)).InterfaceVersionSetting.Value, DeviceManager.ServerTransactionID, ClientID, ClientTransactionID);
        }
        /// <summary>
        /// OmniSim Only - The ASCOM Interface Version, allowed values are 1-3
        /// </summary>
        /// <remarks>
        /// <para>The ASCOM Interface Version, allowed values are 1-3</para>
        /// </remarks>
        /// <param name="DeviceNumber">Zero based device number as set on the server (A uint32 with a range of 0 to 4294967295)</param>
        /// <param name="InterfaceVersion">The ASCOM Interface Version, allowed values are 1-3</param>
        /// <param name="ClientID">Client's unique ID.</param>
        /// <param name="ClientTransactionID">Client's transaction ID.</param>
        /// <response code="200">Transaction complete or exception</response>
        /// <response code="400" examples="Error message describing why the command cannot be processed">Method or parameter value error, check error message</response>
        /// <response code="500" examples="Error message describing why the command cannot be processed">Server internal error, check error message</response>
        [HttpPut]
        [Produces(MediaTypeNames.Application.Json)]
        [ApiExplorerSettings(GroupName = "OmniSim")]
        [Route("safetymonitor/{DeviceNumber}/interfaceversion")]
        public ActionResult<Response> InterfaceVersion(
            [Required][DefaultValue(0)][SwaggerSchema(Strings.DeviceIDDescription, Format = "uint32")][Range(0, 4294967295)] uint DeviceNumber,
            [Required][FromForm][SwaggerSchema("The ASCOM Interface Version, allowed values are 1-3")] System.Int16 InterfaceVersion,
            [FromForm][SwaggerSchema(Strings.ClientIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientID = 0,
            [FromForm][SwaggerSchema(Strings.ClientTransactionIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientTransactionID = 0)
        {
            return ProcessRequest(() => { ((DeviceManager.GetSafetyMonitor(DeviceNumber) as ASCOM.Simulators.SafetyMonitor)).InterfaceVersionSetting.Value = InterfaceVersion; }, DeviceManager.ServerTransactionID, ClientID, ClientTransactionID, $"InterfaceVersion={InterfaceVersion}");
        }
        /// <summary>
        /// OmniSim Only - If the Safety Monitor returns IsSafe as true or false
        /// </summary>
        /// <remarks>
        /// <para>If the Safety Monitor returns IsSafe as true or false</para>
        /// </remarks>
        /// <param name="DeviceNumber">Zero based device number as set on the server (A uint32 with a range of 0 to 4294967295)</param>
        /// <param name="ClientID">Client's unique ID.</param>
        /// <param name="ClientTransactionID">Client's transaction ID.</param>
        /// <response code="200">Transaction complete or exception</response>
        /// <response code="400" examples="Error message describing why the command cannot be processed">Method or parameter value error, check error message</response>
        /// <response code="500" examples="Error message describing why the command cannot be processed">Server internal error, check error message</response>
        [HttpGet]
        [Produces(MediaTypeNames.Application.Json)]
        [ApiExplorerSettings(GroupName = "OmniSim")]
        [Route("safetymonitor/{DeviceNumber}/issafesetting")]
        public ActionResult<ASCOM.Common.Alpaca.BoolResponse> IsSafeSetting(
            [Required][DefaultValue(0)][SwaggerSchema(Strings.DeviceIDDescription, Format = "uint32")][Range(0, 4294967295)] uint DeviceNumber,
            [SwaggerSchema(Strings.ClientIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientID = 0,
            [SwaggerSchema(Strings.ClientTransactionIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientTransactionID = 0)
        {
            return ProcessRequest(() => ((DeviceManager.GetSafetyMonitor(DeviceNumber) as ASCOM.Simulators.SafetyMonitor)).IsSafeSetting.Value, DeviceManager.ServerTransactionID, ClientID, ClientTransactionID);
        }
        /// <summary>
        /// OmniSim Only - If the Safety Monitor returns IsSafe as true or false
        /// </summary>
        /// <remarks>
        /// <para>If the Safety Monitor returns IsSafe as true or false</para>
        /// </remarks>
        /// <param name="DeviceNumber">Zero based device number as set on the server (A uint32 with a range of 0 to 4294967295)</param>
        /// <param name="IsSafeSetting">If the Safety Monitor returns IsSafe as true or false</param>
        /// <param name="ClientID">Client's unique ID.</param>
        /// <param name="ClientTransactionID">Client's transaction ID.</param>
        /// <response code="200">Transaction complete or exception</response>
        /// <response code="400" examples="Error message describing why the command cannot be processed">Method or parameter value error, check error message</response>
        /// <response code="500" examples="Error message describing why the command cannot be processed">Server internal error, check error message</response>
        [HttpPut]
        [Produces(MediaTypeNames.Application.Json)]
        [ApiExplorerSettings(GroupName = "OmniSim")]
        [Route("safetymonitor/{DeviceNumber}/issafesetting")]
        public ActionResult<Response> IsSafeSetting(
            [Required][DefaultValue(0)][SwaggerSchema(Strings.DeviceIDDescription, Format = "uint32")][Range(0, 4294967295)] uint DeviceNumber,
            [Required][FromForm][SwaggerSchema("If the Safety Monitor returns IsSafe as true or false")] System.Boolean IsSafeSetting,
            [FromForm][SwaggerSchema(Strings.ClientIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientID = 0,
            [FromForm][SwaggerSchema(Strings.ClientTransactionIDDescription, Format = "uint32")][Range(0, 4294967295)] uint ClientTransactionID = 0)
        {
            return ProcessRequest(() => { ((DeviceManager.GetSafetyMonitor(DeviceNumber) as ASCOM.Simulators.SafetyMonitor)).IsSafeSetting.Value = IsSafeSetting; }, DeviceManager.ServerTransactionID, ClientID, ClientTransactionID, $"IsSafeSetting={IsSafeSetting}");
        }
}
}
