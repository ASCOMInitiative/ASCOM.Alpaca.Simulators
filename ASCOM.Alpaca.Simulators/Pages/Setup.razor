@page "/setup"

@inject IToastService toastService
@inject NavigationManager NavManager

@using ASCOM.Common.Interfaces
@using LetsMake

<fieldset>
    <legend>Server Settings</legend>
    <div class="grid-container-two">
        <div class="grid-item-right">
            <span>Server Version:</span>
        </div>
        <div class="grid-item-left">
            <span>@ServerSettings.ServerVersion</span>
        </div>
        <div class="grid-item-right">
            <span>Latest Version: @UpdateText</span>
        </div>
        <div class="grid-item-left">
            <button @onclick="CheckForUpdates" style="min-width:12ch; vertical-align:middle;">Check for Updates</button>
        </div>
        <div class="grid-item-right">
            <span>Server Location:</span>
        </div>
        <div class="grid-item-left">
            <input type="text" @bind="Location" style="width:21ch;">
        </div>
        <div class="grid-item-right">
            <span>Bind to all interfaces (if off the OmniSim will only be available on localhost):</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox" @bind="RemoteAccess">
        </div>

        <div class="grid-item-right">
            <span>Server (Alpaca) Port:</span>
        </div>
        <div class="grid-item-left">
            <input type="number" @bind="ServerPort" min="1" max="65535" style="width:20ch;">
        </div>

        <div class="grid-item-right">
            <span>Open Browser on Start:</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox" @bind="StartBrowser">
        </div>

        <div class="grid-item-right">
            <span>Console display:</span>
        </div>
        <div class="grid-item-left">
            <select @bind="ConsoleDisplay" disabled="@(OperatingSystem.IsWindows()?false:true)">
                <option value="@ConsoleDisplayOption.StartNormally">Visible console</option>
                @* Only show the minimized console on Windows OS *@
                @if (OperatingSystem.IsWindows()) // This is a Windows OS
                {
                    <option value="@ConsoleDisplayOption.StartMinimized">Minimized console</option>
                    <option value="@ConsoleDisplayOption.NoConsole">No console</option>
                }
            </select>
            <span>@(OperatingSystem.IsWindows() ? "" : " Windows only")</span>
        </div>

        <div class="grid-item-right">
            <span>Require Strict API Compliance:</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox" @bind="StrictAPIMode">
        </div>

        <div class="grid-item-right">
        </div>
        <div class="grid-item-right">
            <button @onclick="SaveServerSettings" style="min-width:12ch; vertical-align:middle;">Save</button>
        </div>
    </div>
</fieldset>

<fieldset>
    <legend>Bound Addresses</legend>

    <table>
        <tr>
            <th>Addresses server is listening on.</th>
        </tr>

        @if (ServerSettings.AllowRemoteAccess)
        {
            try
            {
                @foreach (var address in DiscoveryManager.AdapterAddress)
                {
                    <tr>
                        <td>@address</td>
                    </tr>
                }
            }
            catch
            {

            }
        }
        else
        {
            <tr>
                <td>localhost</td>
            </tr>
        }
    </table>
</fieldset>

<fieldset>
    <legend>Driver Settings</legend>
    <p>Note: reducing the number of drivers requires a restart to apply</p>
    <div class="grid-container-two">
        <div class="grid-item-right">
            <span>Prevent Disconnects:</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox" @bind="PreventRemoteDisconnects">
        </div>
        <div class="grid-item-right">
            <span>Number of Domes:</span>
        </div>
        <div class="grid-item-left">
            <input type="number" @bind="NDomes" min="1" max="4" style="width:20ch;">
        </div>
        <div class="grid-item-right">
            <span>Number of Filter Wheels:</span>
        </div>
        <div class="grid-item-left">
            <input type="number" @bind="NFilterWheels" min="1" max="4" style="width:20ch;">
        </div>
        <div class="grid-item-right">
            <span>Number of Focusers:</span>
        </div>
        <div class="grid-item-left">
            <input type="number" @bind="NFocusers" min="1" max="4" style="width:20ch;">
        </div>
        <div class="grid-item-right">
            <span>Number of Rotators:</span>
        </div>
        <div class="grid-item-left">
            <input type="number" @bind="NRotators" min="1" max="4" style="width:20ch;">
        </div>
        <div class="grid-item-right">
            <button @onclick="SaveDriverSettings" style="min-width:12ch; vertical-align:middle;">Save</button>
        </div>
    </div>
</fieldset>

<fieldset>
    <legend>Alpaca Discovery Settings</legend>
    <div class="grid-container-two">
        <div class="grid-item-right">
            <span>Allow Discovery:</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox" @bind="Discovery">
        </div>

        <div class="grid-item-right">
            <span>Discovery Port:</span>
        </div>
        <div class="grid-item-left">
            <input type="number" @bind="DiscoveryPort" min="1" max="65535" style="width:20ch;">
        </div>

        <div class="grid-item-right">
            <span>Respond to localhost on loopback only:</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox" @bind="LocalHostOnlyOnHost">
        </div>

        <div class="grid-item-right">
        </div>
        <div class="grid-item-right">
            <button @onclick="SaveDiscovery" style="min-width:12ch; vertical-align:middle;">Save</button>
        </div>
    </div>
</fieldset>

<fieldset>
    <legend>Security Settings</legend>
    <div class="grid-container-two">
        <div class="grid-item-right">
            <span>Require Authorization:</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox" @bind="RequireAuthorization">
        </div>

        <div class="grid-item-right">
            <span>User Name:</span>
        </div>
        <div class="grid-item-left">
            <input type="text" @bind="UserName" style="width:21ch;" disabled="@DisableAuth">
        </div>

        <div class="grid-item-right">
            <span>Password:</span>
        </div>
        <div class="grid-item-left">
            <input type="password" @bind="Password" style="width:21ch;" disabled="@DisableAuth">
        </div>

        <div class="grid-item-right">
            <span>Repeat:</span>
        </div>
        <div class="grid-item-left">
            <input type="password" @bind="Password2" style="width:21ch;" disabled="@DisableAuth">
        </div>

        <div class="grid-item-right">
        </div>
        <div class="grid-item-right">
            <button @onclick="SaveSecuritySettings" style="min-width:12ch; vertical-align:middle;">Save</button>
        </div>
    </div>
</fieldset>

<fieldset>
    <legend>Log Settings</legend>
    <p>The logging system will log out at or above the specified level.</p>
    <div class="grid-container-two">
        <div class="grid-item-right">
            <span>Log Level:</span>
        </div>
        <div class="grid-item-left">
            <select @bind="LoggingLevel">
                <option value="@LogLevel.Verbose">Verbose</option>
                <option value="@LogLevel.Debug">Debug</option>
                <option value="@LogLevel.Information">Information</option>
                <option value="@LogLevel.Warning">Warning</option>
                <option value="@LogLevel.Error">Error</option>
                <option value="@LogLevel.Fatal">Fatal</option>
            </select>

        </div>

        <div class="grid-item-right">
            <span>Also write log to console:</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox" @bind="LogToConsole">
        </div>

        <div class="grid-item-right">
        </div>
        <div class="grid-item-right">
            <button @onclick="SaveLogSettings" style="min-width:12ch; vertical-align:middle;">Save</button>
        </div>

    </div>
</fieldset>

<fieldset>
    <legend>Run OpenAPI / Swagger</legend>
    <p>The OpenAPI / Swagger integration allows for the Alpaca API documentation to be shown by this server. It also allows calls to be made directly in the browser. Note that this will apply on the next time this driver runs.</p>
    <div class="grid-container-two">
        <div class="grid-item-right">
            <span>Run OpenAPI:</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox" @bind="RunSwagger">
            <button @onclick="SaveSwaggerSettings" style="min-width:12ch; vertical-align:middle;">Save</button>
        </div>
    </div>
</fieldset>

<fieldset>
    <legend>SSL Settings (preview)</legend>
    <div class="grid-container-two">
        <div class="grid-item-right">
            <span>Enable SSL:</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox" @bind="UseSSL">
        </div>

        <div class="grid-item-right">
            <span>SSL Port:</span>
        </div>
        <div class="grid-item-left">
            <span>@ServerSettings.SSLPort</span>
        </div>

        <div class="grid-item-right">
            <span>SSL Cert Path:</span>
        </div>
        <div class="grid-item-left">
            <p>@SSLPath</p>
        </div>

        <div class="grid-item-right">
        </div>
        <div class="grid-item-right">
            <button @onclick="SaveSSLSettings" style="min-width:12ch; vertical-align:middle;">Save</button>
        </div>
    </div>
</fieldset>

<fieldset>
    <legend>Shutdown Driver</legend>
    <div class="grid-container-two">
        <div class="grid-item-right">
            <span>Shutdown:</span>
        </div>
        <div class="grid-item-left">
            <input type="checkbox"
                   @bind="EnableShutdown">
            <button @onclick="Shutdown" style="min-width:12ch; vertical-align:middle;" disabled="@AllowShutdown">Shutdown</button>
        </div>
    </div>
</fieldset>

@code {

    bool Discovery
    {
        get;
        set;
    } = ServerSettings.AllowDiscovery;

    UInt16 DiscoveryPort
    {
        get;
        set;
    } = ServerSettings.DiscoveryPort;

    UInt16 NDomes
    {
        get;
        set;
    } = ServerSettings.NumberOfDomes;

    UInt16 NFilterWheels
    {
        get;
        set;
    } = ServerSettings.NumberOfFilterWheels;

    UInt16 NFocusers
    {
        get;
        set;
    } = ServerSettings.NumberOfFocusers;

    UInt16 NRotators
    {
        get;
        set;
    } = ServerSettings.NumberOfRotators;

    bool StrictAPIMode
    {
        get;
        set;
    } = ServerSettings.RunInStrictAlpacaMode;

    bool LocalHostOnlyOnHost
    {
        get;
        set;
    } = ServerSettings.LocalRespondOnlyToLocalHost;

    bool RemoteAccess
    {
        get;
        set;
    } = ServerSettings.AllowRemoteAccess;

    UInt16 ServerPort
    {
        get;
        set;
    } = ServerSettings.ServerPort;

    bool StartBrowser
    {
        get;
        set;
    } = ServerSettings.AutoStartBrowser;

    ConsoleDisplayOption ConsoleDisplay
    {
        get;
        set;
    } = ServerSettings.ConsoleDisplayDefault;

    bool EnableShutdown
    {
        get;
        set;
    } = false;

    string Location
    {
        get;
        set;
    } = ServerSettings.Location;

    bool AllowShutdown
    {
        get
        {
            return !EnableShutdown;
        }
    }

    bool PreventRemoteDisconnects
    {
        get;
        set;
    } = ServerSettings.PreventRemoteDisconnects;

    bool RequireAuthorization
    {
        get;
        set;
    } = ServerSettings.UseAuth;

    bool DisableAuth => !RequireAuthorization;

    string UserName
    {
        get;
        set;
    } = ServerSettings.UserName;

    LogLevel LoggingLevel
    {
        get;
        set;
    } = ServerSettings.LoggingLevel;

    bool LogToConsole
    {
        get;
        set;
    } = ServerSettings.LogToConsole;

    string Password
    {
        get;
        set;
    }

    string Password2
    {
        get;
        set;
    }

    bool RunSwagger
    {
        get;
        set;
    } = ServerSettings.RunSwagger;

    bool UseSSL
    {
        get;
        set;
    } = ServerSettings.UseSSL;

    string SSLPath
    {
        get;
        set;
    } = ServerSettings.SSLCertPath;

    string SSLPassword
    {
        get;
        set;
    } = ServerSettings.SSLCertPassword;

    string UpdateText
    {
        get
        {
            try
            {
                return ServerSettings.UpdateChecker.Releases?.Latest().TagName ?? "Unknown";
            }
            catch
            {

            }
            return "Unknown";
        }
    }

    void CheckForUpdates()
    {
        ServerSettings.CheckForUpdates();
        System.Threading.Thread.Sleep(1500);
        NavManager.NavigateTo("/update");
    }

    void SaveDiscovery()
    {
        try
        {
            ServerSettings.AllowDiscovery = Discovery;

            ServerSettings.DiscoveryPort = DiscoveryPort;

            ServerSettings.LocalRespondOnlyToLocalHost = LocalHostOnlyOnHost;

            DisplaySuccess("Discovery Settings Saved");
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void SaveServerSettings()
    {
        try
        {
            bool SettingsChanged = false;

            if (ServerSettings.AllowRemoteAccess != RemoteAccess)
            {
                ServerSettings.AllowRemoteAccess = RemoteAccess;
                SettingsChanged = true;
            }

            if (ServerSettings.ServerPort != ServerPort)
            {
                ServerSettings.ServerPort = ServerPort;
                SettingsChanged = true;
            }

            ServerSettings.Location = Location;

            ServerSettings.AutoStartBrowser = StartBrowser;

            if (ServerSettings.ConsoleDisplayDefault != ConsoleDisplay)
            {
                Program.ShowConsole(ConsoleDisplay);
                ServerSettings.ConsoleDisplayDefault = ConsoleDisplay;
            }

            ServerSettings.RunInStrictAlpacaMode = StrictAPIMode;

            DisplaySuccess("Server Settings Saved");

            if (SettingsChanged) //If any core settings change call a restart.
            {
                Program.Main(null);
            }

        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void SaveDriverSettings()
    {
        try
        {
            ServerSettings.PreventRemoteDisconnects = PreventRemoteDisconnects;

            ServerSettings.NumberOfDomes = NDomes;
            DriverManager.LoadDomes();

            ServerSettings.NumberOfFilterWheels = NFilterWheels;
            DriverManager.LoadFilterWheels();

            ServerSettings.NumberOfFocusers = NFocusers;
            DriverManager.LoadFocusers();

            ServerSettings.NumberOfRotators = NRotators;
            DriverManager.LoadRotators();

            DisplaySuccess("Driver Settings Saved");
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void SaveLogSettings()
    {
        try
        {
            ServerSettings.LoggingLevel = LoggingLevel;
            ASCOM.Alpaca.Simulators.Logging.Log.SetMinimumLoggingLevel(LoggingLevel);
            ServerSettings.LogToConsole = LogToConsole;
            DisplaySuccess("Logging Settings Saved");
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void SaveSecuritySettings()
    {
        try
        {
            if (RequireAuthorization)
            {
                if (UserName == null || UserName == string.Empty)
                {
                    DisplayWarning("You must set a User Name");
                    return;
                }

                if (Password == null || Password == string.Empty)
                {
                    DisplayWarning("You must set a Password");
                    return;
                }

                if (Password != Password2)
                {
                    DisplayWarning("Passwords do not match");
                    return;
                }

                ServerSettings.UserName = UserName;
                ServerSettings.Password = Password;
                ServerSettings.UseAuth = RequireAuthorization;

                NavManager.NavigateTo("/");
            }
            else
            {
                ServerSettings.UseAuth = RequireAuthorization;
            }

            DisplaySuccess("Security Saved!");
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void SaveSwaggerSettings()
    {
        try
        {
            ServerSettings.RunSwagger = RunSwagger;

            DisplaySuccess("Open API Settings saved!");
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void SaveSSLSettings()
    {
        try
        {
            bool SettingsChanged = false;

            if (ServerSettings.UseSSL != UseSSL)
            {
                SettingsChanged = true;
            }

            ServerSettings.UseSSL = UseSSL;

            DisplaySuccess("SSL settings changed!");

            if (SettingsChanged) //If any core settings change call a restart.
            {
                DisplayWarning("Automatically reloading OmniSim, a full restart may be required to apply all settings.");
                System.Threading.Thread.Sleep(2000);
                Program.Main(null);
            }
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void Shutdown()
    {
        try
        {
            Startup.Lifetime.StopApplication();
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    public void DisplayError(string message)
    {
        toastService.ShowError(message);
    }

    public void DisplayWarning(string message)
    {
        toastService.ShowWarning(message);
    }

    public void DisplaySuccess(string message)
    {
        toastService.ShowSuccess(message);
    }
}