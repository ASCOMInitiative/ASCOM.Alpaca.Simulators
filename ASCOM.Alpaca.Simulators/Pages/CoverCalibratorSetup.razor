@page "/setup/v1/covercalibrator/{InstanceID:int}/setup"

@inject IToastService toastService
@inject NavigationManager uriHelper;

@using ASCOM.Common.DeviceInterfaces; 

<body>
    @if (Device.Connected)
    {
        <fieldset>
            <legend>Device is Connected</legend>
            <p>The device must be disconnected to safely make changes.</p>
        </fieldset>
    }
    <fieldset disabled="@Device.Connected">
        <legend>Calibrator Settings</legend>
        <div class="grid-container-two">
            <div class="grid-item-right">
                <span>Max Brightness:</span>
            </div>
            <div class="grid-item-left">
                <input type="number" class="number-narrow"
                       min="1" max="2147483647" @bind="@MaxBrightness">
            </div>

            <div class="grid-item-right">
                <span>Stabilization Time:</span>
            </div>
            <div class="grid-item-left">
                <input type="number" step="0.1" class="number-narrow"
                       min="0.0" max="100.0" @bind="CalStabTime">
            </div>

            <div class="grid-item-right">
                <span>Calibrator Status:</span>
            </div>
            <div class="grid-item-left">
                <select id="devicetype" @bind="CalStatus" style="width:100%;max-width:21ch;">
                    @foreach (var calStatus in (CalibratorStatus[])Enum.GetValues(typeof(CalibratorStatus)))
                    {
                        <option value="@calStatus">@calStatus.ToString()</option>
                    }
                </select>
            </div>
        </div>
    </fieldset>

    <fieldset disabled="@Device.Connected">
        <legend>Cover Settings</legend>
        <div class="grid-container-two">

            <div class="grid-item-right">
                <span>Opening Time:</span>
            </div>
            <div class="grid-item-left">
                <input type="number" step="0.1" class="number-narrow"
                       min="0.0" max="100.0" @bind="OpeningTime">
            </div>

            <div class="grid-item-right">
                <span>Cover Status:</span>
            </div>
            <div class="grid-item-left">
                <select id="devicetype" @bind="CoverStatus" style="width:100%;max-width:21ch;">
                    @foreach (var coverStatus in (CoverStatus[])Enum.GetValues(typeof(CoverStatus)))
                    {
                        <option value="@coverStatus">@coverStatus.ToString()</option>
                    }
                </select>
            </div>
        </div>
    </fieldset>
    <fieldset disabled="@Device.Connected">
        <legend>Settings</legend>
        <div class="grid-container-two">

            <div class="grid-item-left">
                <button @onclick="Reset">Reset</button>
            </div>
            <div class="grid-item-right">
                <button @onclick="SaveDeviceSettings">Save</button>
            </div>
        </div>
    </fieldset>
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.CoverCalibratorSimulator Device
    {
        get
        {
            return DeviceManager.GetCoverCalibrator((uint)InstanceID) as ASCOM.Simulators.CoverCalibratorSimulator;
        }
    }

    public int MaxBrightness
    {
        get
        {
            return Device.MaxBrightnessValue;
        }
        set
        {
            if (MaxBrightness > 0)
            {
                Device.MaxBrightnessValue = value;
            }
            else
            {
                toastService.ShowWarning("Max Brightness must be greater then zero.");
            }
        }
    }

    public double CalStabTime
    {
        get
        {
            return Device.CalibratorStablisationTimeValue;
        }
        set
        {
            if (value >= 0)
            {
                Device.CalibratorStablisationTimeValue = value;
            }
            else
            {
                toastService.ShowWarning("The Calibration Stablisation time must be positive.");
            }
        }
    }

    public CalibratorStatus CalStatus
    {
        get
        {
            return Device.CalibratorStateInitialisationValue;
        }
        set
        {
            Device.CalibratorStateInitialisationValue = value;
        }
    }

    public double OpeningTime
    {
        get
        {
            return Device.CoverOpeningTimeValue;
        }
        set
        {
            if (value >= 0)
            {
                Device.CoverOpeningTimeValue = value;
            }
            else
            {
                toastService.ShowWarning("Opening Time must be must be positive.");
            }
        }
    }

    public CoverStatus CoverStatus
    {
        get
        {
            return Device.CoverStateInitialisationValue;
        }
        set
        {
            Device.CoverStateInitialisationValue = value;
        }
    }

    public void SaveDeviceSettings()
    {
        try
        {
            Device.WriteProfile();

            toastService.ShowSuccess("Settings Saved");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public void Reset()
    {
        try
        {
            Device.ResetSettings();

            toastService.ShowSuccess("Settings Reset");

            var timer = new System.Threading.Timer(new System.Threading.TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 2000, 2000);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public void DisplayError(string error)
    {
        toastService.ShowError(error);
    }
}