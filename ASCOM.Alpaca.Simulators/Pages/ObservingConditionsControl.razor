@page "/control/v1/observingconditions/{InstanceID:int}/"

@inject IToastService toastService
@inject NavigationManager uriHelper;
@using System.Timers;

<body>
    <fieldset>
        <legend>ObservingConditions</legend>
        <div class="grid-container-two">

            <div class="grid-item-left">
                <svg width="30" height="30">
                    <circle cx="15" cy="15" r="11" style="fill:@ConnectionColor;stroke-width:3;stroke:rgb(0,0,0)" />
                </svg>
                <button @onclick="Connect">@ConnectText</button>
            </div>
            <div class="grid-item-right">
                <button @onclick="Setup">Setup</button>
            </div>
        </div>

        <table style="width:100%">
            <tr>
                <th>Name</th>
                <th>Value</th>
                <th>Unit</th>
                <th></th>
                <th>Override</th>
            </tr>

            @foreach (var dev in ASCOM.Simulators.OCSimulator.Sensors)
            {
                <tr>
                    <th>@dev.Value.SensorName</th>
                    @if (Connected)
                    {
                        <th>@ASCOM.Simulators.OCSimulator.GetSensorValue(@dev.Value.SensorName).ToString("0.000")</th>
                        <th>@dev.Value.Unit</th>
                        <th><input type="checkbox" @bind="@dev.Value.Override"></th>
                        <th><input type="range" min="@dev.Value.SimFromValue" max="@dev.Value.SimToValue" step=".1" @bind="@dev.Value.OverrideValue" style="min-width:30ch"></th>
                    }
                    else
                    {
                        <th>-----</th>
                        <th>@dev.Value.Unit</th>
                    }
                </tr>
            }

        </table>

        <div class="grid-container-two">

            <div class="grid-item-left">
            </div>
            <div class="grid-item-right">
                <button @onclick="SaveOverride">Save Overrides</button>
            </div>
        </div>
    </fieldset>
</body>

@code {
        [Parameter]
        public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.ObservingConditions Device
    {
        get
        {
            return DeviceManager.GetObservingConditions(InstanceID) as ASCOM.Simulators.ObservingConditions;
        }
    }

    Timer timer = new Timer(100);

    public void Dispose()
    {
        timer.Elapsed -= OnPageRefresh;
        timer.Stop();
    }

    protected override void OnInitialized()
    {
        timer.Elapsed += OnPageRefresh;
        timer.AutoReset = true;
        timer.Enabled = true;
        base.OnInitialized();
    }

    private void OnPageRefresh(Object source, ElapsedEventArgs e)
    {
        try
        {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch
                {

                }
            });
        }
        catch
        {

        }
    }

    #region Control

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    #endregion

    public void SaveOverride()
    {
        try
        {
            ASCOM.Simulators.OCSimulator.WriteProfile();

            toastService.ShowSuccess("Settings Saved");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public void Setup()
    {
        uriHelper.NavigateTo($"/setup/v1/observingconditions/{InstanceID}/setup");
    }

    public void DisplayError(string error)
    {
        toastService.ShowError(error);
    }
}