@page "/control/v1/filterwheel/{InstanceID:int}/"

@inject IToastService toastService
@inject NavigationManager uriHelper;
@using System.Timers;

<body>
    <fieldset>
        <legend>FilterWheel</legend>
        <div class="grid-container-two">

            <div class="grid-item-right">
                <svg width="30" height="30">
                    <circle cx="15" cy="15" r="11" style="fill:@ConnectionColor;stroke-width:3;stroke:rgb(0,0,0)" />
                </svg>
                <button @onclick="Connect">@ConnectText</button>
            </div>
            <div class="grid-item-left">
                <button @onclick="Setup">Setup</button>
            </div>

            <div class="grid-item-right">
                <button @onclick="Previous">Previous</button>
            </div>
            <div class="grid-item-left">
                <button @onclick="Next">Next</button>
            </div>

            <div class="grid-item-right">
                <p>Position:</p>
            </div>
            <div class="grid-item-left">
                <p>@Position</p>
            </div>

            <div class="grid-item-right">
                <p>Name:</p>
            </div>
            <div class="grid-item-left">
                <p>@Name</p>
            </div>

            <div class="grid-item-right">
                <p>Offset:</p>
            </div>
            <div class="grid-item-left">
                <p>@Offset</p>
            </div>

        </div>
    </fieldset>
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.FilterWheel Device
    {
        get
        {
            return DeviceManager.GetFilterWheel(InstanceID) as ASCOM.Simulators.FilterWheel;
        }
    }

    Timer timer = new Timer(100);

    public void Dispose()
    {
        timer.Elapsed -= OnPageRefresh;
        timer.Stop();
    }

    protected override void OnInitialized()
    {
        timer.Elapsed += OnPageRefresh;
        timer.AutoReset = true;
        timer.Enabled = true;
        base.OnInitialized();
    }

    private void OnPageRefresh(Object source, ElapsedEventArgs e)
    {
        try
        {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch
                {

                }
            });
        }
        catch
        {

        }
    }

    #region Control

    bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    void Previous()
    {
        try
        {
            if (Connected)
            {
                Device.Position = (short)((Device.Position - 1 + Device.Names.Length) % Device.Names.Length);
            }
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void Next()
    {
        try
        {
            if (Connected)
            {
                Device.Position = (short)((Device.Position + 1) % Device.Names.Length);
            }
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    int Position
    {
        get
        {
            if (Connected)
            {
                return Device.Position;
            }
            return 0;
        }
    }

    string Name
    {
        get
        {
            if (Connected)
            {
                if (Position >= 0)
                {
                    return Device.Names[Position];
                }
                return "Moving";
            }
            return "";
        }
    }

    int Offset
    {
        get
        {
            if (Connected)
            {
                if (Position >= 0)
                {
                    return Device.FocusOffsets[Position];
                }
                return 0;
            }
            return 0;
        }
    }

    #endregion

    void Setup()
    {
        uriHelper.NavigateTo($"/setup/v1/filterwheel/{InstanceID}/setup");
    }

    void DisplayError(string error)
    {
        toastService.ShowError(error);
    }
}