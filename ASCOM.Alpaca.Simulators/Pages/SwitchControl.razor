@page "/control/v1/switch/{InstanceID:int}/"

@inject IToastService toastService
@inject NavigationManager uriHelper;
@using System.Timers;

<body>
    @if (!InstanceExists)
    {
        <h2>Device Instance @InstanceID does not exist in this simulator</h2>
    }
    else
    {
        <fieldset>
            <legend>Switch</legend>
            <div class="grid-container-two">

                <div class="grid-item-left">
                    <svg width="30" height="30">
                        <circle cx="15" cy="15" r="11" style="fill:@ConnectionColor;stroke-width:3;stroke:rgb(0,0,0)" />
                    </svg>
                    <button @onclick="Connect">@ConnectText</button>
                </div>
                <div class="grid-item-right">
                    <button @onclick="Setup">Setup</button>
                </div>
            </div>

            <table style="width:100%">
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Set</th>
                    <th>Value</th>
                </tr>
                @if (Connected)
                {
                    @for (short i = 0; i < Device.MaxSwitch; i++)
                    {
                        int index = i + 1;
                        <tr>
                            <th>@index</th>
                            <th>@Device.GetSwitchName(i)</th>
                            <th><input type="range" min="@Device.MinSwitchValue(i)" max="@Device.MaxSwitchValue(i)" step="@Device.SwitchStep(i)" value="@Device.GetSwitchValue(i)" @onchange="@((ChangeEventArgs __e) => SetValue(index, Convert.ToDouble(__e.Value)))" style="min-width:40ch"></th>
                            <th>@Device.GetSwitchValue(i)</th>
                        </tr>
                    }
                }
            </table>

        </fieldset>
    }
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    private bool InstanceExists
    {
        get
        {
            return DeviceManager.Switches.ContainsKey(InstanceID);
        }
    }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Switch Device
    {
        get
        {
            return DeviceManager.GetSwitch((uint)InstanceID) as ASCOM.Simulators.Switch;
        }
    }

    Timer timer = new Timer(100);

    public void Dispose()
    {
        timer.Elapsed -= OnPageRefresh;
        timer.Stop();
    }

    protected override void OnInitialized()
    {
        timer.Elapsed += OnPageRefresh;
        timer.AutoReset = true;
        timer.Enabled = true;
        base.OnInitialized();
    }

    private void OnPageRefresh(Object source, ElapsedEventArgs e)
    {
        try
        {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch
                {

                }
            });
        }
        catch
        {

        }
    }

    #region Control

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    void SetValue(int ID, double value)
    {
        try
        {
            Device.SetSwitchValue((short)(ID - 1), value);
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    #endregion

    public void Setup()
    {
        uriHelper.NavigateTo($"/setup/v1/switch/{InstanceID}/setup");
    }

    public void DisplayError(string error)
    {
        toastService.ShowError(error);
    }
}