@page "/setup/v1/Rotator/{InstanceID:int}/setup"

@inject IToastService toastService
@inject NavigationManager uriHelper;

<body>
    @if (!InstanceExists)
    {
        <h2>Device Instance @InstanceID does not exist in this simulator</h2>
    }
    else
    {
        if (InstanceID == 0)
        {
            <h3>
                Rotator Setup
            </h3>
        }
        else
        {
            <h3>
                Rotator @InstanceID Setup
            </h3>
        }

        @if (Device.Connected)
        {
            <fieldset>
                <legend>Device is Connected</legend>
                <p>The device must be disconnected in order to safely make changes.</p>
            </fieldset>
        }
        <fieldset disabled="@Device.Connected">
            <legend>Rotator Settings</legend>

            <div>
                <label for="interfaceVersion">Simulation Interface Version:</label>

                <select name="interfaceVersion" id="interfaceVersion" @bind="InterfaceVersion">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                </select>
            </div>

            <div>
                <label for="rotationrate">Rotation Rate (deg/sec):</label>
                <input name="rotationrate" id="rotationrate" type="number" min="0" max="60" step=".1" @bind="RotationRate" />
            </div>

            <div>
                <label for="syncoffset">Sync Offset (deg):</label>
                <input name="syncoffset" id="syncoffset" type="number" min="-360" max="360" step=".1" @bind="SyncOffset" />
            </div>

            <p>Step size @Device.StepSize (4 steps/sec.)</p>
            <div>
                <label for="canreverse">Can Reverse</label>
                <input name="canreverse" id="canreverse" type="checkbox" @bind="CanReverse" />
            </div>

            <label for="reverse">Reverse</label>
            <input name="reverse" id="reverse" type="checkbox" @bind="Reverse" />
        </fieldset>

        <fieldset disabled="@Device.Connected">
            <legend>Save</legend>
            <div class="grid-container-two">

                <div class="grid-item-left">
                    <button @onclick="Reset">Reset</button>
                </div>
                <div class="grid-item-right">
                    <button @onclick="SaveDeviceSettings">Save</button>
                </div>
            </div>
        </fieldset>
    }
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    private bool InstanceExists
    {
        get
        {
            return DeviceManager.Rotators.ContainsKey(InstanceID);
        }
    }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Rotator Device
    {
        get
        {
            return DeviceManager.GetRotator((uint)InstanceID) as ASCOM.Simulators.Rotator;
        }
    }

    protected override void OnInitialized()
    {
        if (InstanceExists)
        {
            SyncOffset = Device.RotatorHardware.SyncOffset.Value;
            RotationRate = Device.RotatorHardware.RotationRate.Value;
            CanReverse = Device.RotatorHardware.CanReverse.Value;
            Reverse = Device.RotatorHardware.Reverse.Value;
            InterfaceVersion = Device.RotatorHardware.InterfaceVersionSetting.Value;
        }

        base.OnInitialized();
    }

    #region Connection

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    #endregion

    #region Settings

    double RotationRate
    {
        get;
        set;
    }

    double SyncOffset
    {
        get;
        set;
    }

    bool CanReverse
    {
        get;
        set;
    }

    bool Reverse
    {
        get;
        set;
    }

    short InterfaceVersion
    {
        get;
        set;
    }
    #endregion

    public void Reset()
    {
        try
        {
            Device.RotatorHardware.ResetProfile();

            toastService.ShowSuccess("Settings Reset");

            var timer = new System.Threading.Timer(new System.Threading.TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 2000, 2000);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public void SaveDeviceSettings()
    {
        try
        {
            if (RotationRate <= 0 || RotationRate > 60)
            {
                toastService.ShowWarning("The Rotation Rate must be between 0 and 60.");
                return;
            }

            if (SyncOffset < -360 || SyncOffset > 360)
            {
                toastService.ShowWarning("The Sync Offset must be between -360 and 360.");
                return;
            }

            Device.RotatorHardware.SaveProfile(RotationRate, CanReverse, Reverse, (float)SyncOffset, InterfaceVersion);

            toastService.ShowSuccess("Settings Saved");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
}