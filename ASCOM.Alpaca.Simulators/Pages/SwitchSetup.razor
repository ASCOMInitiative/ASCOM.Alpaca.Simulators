@page "/setup/v1/Switch/{InstanceID:int}/setup"

@inject IToastService toastService
@inject NavigationManager uriHelper;

<body>
    @if (Device.Connected)
    {
        <fieldset>
            <legend>Device is Connected</legend>
            <p>The device must be disconnected in order to safely make changes.</p>
        </fieldset>
    }
    <fieldset disabled="@Device.Connected">
        <legend>Switch Settings</legend>

        <table style="width:100%">
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Value</th>
                <th>Min</th>
                <th>Max</th>
                <th>Step</th>
                <th>Can Write</th>
            </tr>
            @{
                int i = 0;
                @foreach (var dev in Switches)
                {
                    int index = i;
                    <tr>
                        <th>@i</th>
                        <th><input type="text" @bind="@Switches[index].Name" style="max-width:10ch"></th>
                        <th><input type="text" @bind="@Switches[index].Description"></th>
                        <th><input type="number" @bind="@Switches[index].Value" min="@Switches[index].Minimum" max="@Switches[index].Maximum" class="switch-number"></th>
                        <th><input type="number" @bind="@Switches[index].Minimum" max="@Switches[index].Maximum" class="switch-number"></th>
                        <th><input type="number" @bind="@Switches[index].Maximum" min="@Switches[index].Minimum" class="switch-number"></th>
                        <th><input type="number" @bind="@Switches[index].StepSize" class="switch-number"></th>
                        <th><input type="checkbox" @bind="@Switches[index].CanWrite" class="switch-number"></th>
                    </tr>

                    i++;
                }
            }
        </table>
    </fieldset>

    <fieldset disabled="@Device.Connected">
        <div class="grid-container-two">

            <div class="grid-item-left">
                <button @onclick="Reset">Reset</button>
            </div>
            <div class="grid-item-right">
                <button @onclick="SaveDeviceSettings">Save</button>
            </div>
        </div>
    </fieldset>
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Switch Device
    {
        get
        {
            return DeviceManager.GetSwitch(InstanceID) as ASCOM.Simulators.Switch;
        }
    }

    List<ASCOM.Simulators.LocalSwitch> Switches
    {
        get;
    } = new List<ASCOM.Simulators.LocalSwitch>();

    protected override void OnInitialized()
    {
        foreach (var device in Device.switches)
        {
            Switches.Add(device);
        }
        base.OnInitialized();
    }

    #region Connection

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    #endregion

    #region Settings
    #endregion

    public void Reset()
    {
        try
        {
            Device.ResetProfile();
            Device.ReadProfile();
            toastService.ShowSuccess("Settings Reset");

            var timer = new System.Threading.Timer(new System.Threading.TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 2000, 2000);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public void SaveDeviceSettings()
    {
        try
        {
            int index = 0;
            foreach (var dev in Switches)
            {
                if (!dev.IsValid(out string reason))
                {
                    var name = dev.Name ?? string.Empty;

                    if (name == string.Empty)
                    {
                        name = $"Switch {index}";
                    }

                    toastService.ShowWarning($"{name} is not valid because {reason}");
                    return;
                }
                index++;
            }
            Device.switches.Clear();

            foreach (var dev in Switches)
            {
                Device.switches.Add(dev);
            }

            Device.WriteProfile();

            toastService.ShowSuccess("Settings Saved");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
}