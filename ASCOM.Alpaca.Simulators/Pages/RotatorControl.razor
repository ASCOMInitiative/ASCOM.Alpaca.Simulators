@page "/control/v1/rotator/{InstanceID:int}/"

@inject IToastService toastService
@inject NavigationManager uriHelper;
@using System.Timers;

<body>
    <fieldset>
        <legend>Rotator</legend>
        <div class="grid-container-two">

            <div class="grid-item-left">
                <svg width="30" height="30">
                    <circle cx="15" cy="15" r="11" style="fill:@ConnectionColor;stroke-width:3;stroke:rgb(0,0,0)" />
                </svg>
                <button @onclick="Connect">@ConnectText</button>
            </div>
            <div class="grid-item-right">
                <button @onclick="Setup">Setup</button>
            </div>

            <div class="grid-item-right">
                <p>Sky PA:</p>
            </div>
            <div class="grid-item-left">
                <p>@SkyPA</p>
            </div>

            <div class="grid-item-right">
                <p>Mechanical PA:</p>
            </div>
            <div class="grid-item-left">
                <p>@MechanicalPA</p>
            </div>

            <div class="grid-item-right">
                <p>Sync Offset:</p>
            </div>
            <div class="grid-item-left">
                <p>@SyncOffset</p>
            </div>

            <div class="grid-item-right">
                <label>Reverse</label>
            </div>
            <div class="grid-item-left">

                <input type="checkbox" @bind="Reverse" />
            </div>

            <div class="grid-item-right">
                <input type="number" min="0" step=".1" max="360" @bind="GoToPosition" />
            </div>
            <div class="grid-item-left">
                <button @onclick="GoTo">Move To</button>
            </div>

            <div class="grid-item-right">
                <p style="color:@MovingColor">@MovingText</p>
            </div>
            <div class="grid-item-left">
                <button @onclick="Halt">Halt</button>
            </div>
        </div>
    </fieldset>
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Rotator Device
    {
        get
        {
            return DeviceManager.GetRotator(InstanceID) as ASCOM.Simulators.Rotator;
        }
    }

    Timer timer = new Timer(100);

    public void Dispose()
    {
        timer.Elapsed -= OnPageRefresh;
        timer.Stop();
    }

    protected override void OnInitialized()
    {
        timer.Elapsed += OnPageRefresh;
        timer.AutoReset = true;
        timer.Enabled = true;
        base.OnInitialized();
    }

    private void OnPageRefresh(Object source, ElapsedEventArgs e)
    {
        try
        {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch
                {

                }
            });
        }
        catch
        {

        }
    }

    #region Control

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    string SkyPA
    {
        get
        {
            if (Device.Connected)
            {
                return Device.Position.ToString("000.0");
            }
            return "---.-";
        }
    }

    string MechanicalPA
    {
        get
        {
            if (Device.Connected)
            {
                return Device.MechanicalPosition.ToString("000.0");
            }
            return "---.-";
        }
    }

    string SyncOffset
    {
        get
        {
            if (Device.Connected)
            {
                return (Device.Position - Device.MechanicalPosition).ToString("+000.0;-000.0");
            }
            return " ---.-";
        }
    }

    string MovingColor
    {
        get
        {
            if (Connected)
            {
                if (Device.IsMoving)
                {
                    return "Green";
                }
            }
            return "Red";
        }
    }

    string MovingText
    {
        get
        {
            if (Connected)
            {
                if (Device.IsMoving)
                {
                    return "Moving";
                }
            }
            return "Not Moving";
        }
    }

    bool Reverse
    {
        get
        {
            if (Connected)
            {
                return Device.Reverse;
            }
            return false;
        }
        set
        {
            try
            {
                Device.Reverse = value;
            }
            catch(Exception ex)
            {
                DisplayError(ex.Message);
            }
        }
    }

    float GoToPosition
    {
        get;
        set;
    } = 0;

    void GoTo()
    {
        try
        {
            if (Device.Connected)
            {
                Device.MoveAbsolute(GoToPosition);
            }
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void Halt()
    {
        try
        {
            Device.Halt();
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    #endregion

    public void Setup()
    {
        uriHelper.NavigateTo($"/setup/v1/rotator/{InstanceID}/setup");
    }

    public void DisplayError(string error)
    {
        toastService.ShowError(error);
    }
}