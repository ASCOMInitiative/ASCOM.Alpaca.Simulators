@page "/control/v1/focuser/{InstanceID:int}/"

@inject IToastService toastService
@inject NavigationManager uriHelper;
@using System.Timers;

<body>
    <fieldset>
        <legend>Focuser</legend>
        <div class="grid-container-two">

            <div class="grid-item-left">
                <svg width="30" height="30">
                    <circle cx="15" cy="15" r="11" style="fill:@ConnectionColor;stroke-width:3;stroke:rgb(0,0,0)" />
                </svg>
                <button @onclick="Connect">@ConnectText</button>
            </div>

            <div class="grid-item-right">
                <ErrorBoundary>
                    <LogLevelControl Driver="@(Device as OmniSim.BaseDriver.Driver)" />
                </ErrorBoundary>
                <button @onclick="Setup">Setup</button>
            </div>

            <div class="grid-item-right">
                <p>Temperature (C):</p>
            </div>
            <div class="grid-item-left">
                <p>@Temperature</p>
            </div>


            <div class="grid-item-right">
                <p>Position (Steps):</p>
            </div>
            <div class="grid-item-left">
                <p>@Position</p>
            </div>

            <div class="grid-item-right">
                <input type="number" min="0" step="1" max="@Device.MaxStepSetting.Value" @bind="GoToPosition" />
            </div>
            <div class="grid-item-left">
                <button @onclick="GoTo">GoTo</button>
            </div>

            <div class="grid-item-right">
            </div>
            <div class="grid-item-left">
                <button @onclick="Halt">Halt</button>
            </div>

            <div class="grid-item-right">
                <label>Temp Comp</label>
                <input type="checkbox" @bind="TempComp" />
            </div>
            <div class="grid-item-left">
            </div>

        </div>
    </fieldset>
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Focuser Device
    {
        get
        {
            return DeviceManager.GetFocuser((uint)InstanceID) as ASCOM.Simulators.Focuser;
        }
    }

    Timer timer = new Timer(100);

    public void Dispose()
    {
        timer.Elapsed -= OnPageRefresh;
        timer.Stop();
    }

    protected override void OnInitialized()
    {
        timer.Elapsed += OnPageRefresh;
        timer.AutoReset = true;
        timer.Enabled = true;
        base.OnInitialized();
    }

    private void OnPageRefresh(Object source, ElapsedEventArgs e)
    {
        try
        {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch
                {

                }
            });
        }
        catch
        {

        }
    }

    #region Control

    bool Connected
    {
        get
        {
            return Device.IsConnected;
        }
    }

    string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    void Connect()
    {
        Device.Connected = !Device.IsConnected;
    }

    double Temperature
    {
        get
        {
            if (Connected)
            {
                try
                {
                    return Device.TemperatureSetting.Value;
                }
                catch
                {

                }
            }
            return 0;
        }
    }

    string Position
    {
        get
        {
            if (Connected)
            {
                if (Device.AbsoluteSetting.Value)
                {
                    try
                    {
                        return Device.PositionSetting.Value.ToString();
                    }
                    catch
                    {

                    }
                }
                else
                {
                    return "Relative";
                }
            }
            return "Unknown";
        }
    }

    int GoToPosition
    {
        get;
        set;
    } = 0;

    void GoTo()
    {
        try
        {
            if (Device.IsConnected)
            {
                Device.Move(GoToPosition);
            }
        }
        catch(Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    bool TempComp
    {
        get
        {
            try
            {
                return Device.TempCompSetting.Value;
            }
            catch
            {
                return false;
            }
        }
        set
        {
            try
            {
                if (Device.IsConnected)
                {
                    Device.TempComp = value;
                }
            }
            catch (Exception ex)
            {
                DisplayError(ex.Message);
            }
        }
    }

    void Halt()
    {
        try
        {
            Device.Halt();
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    #endregion

    public void Setup()
    {
        uriHelper.NavigateTo($"/setup/v1/focuser/{InstanceID}/setup");
    }

    public void DisplayError(string error)
    {
        toastService.ShowError(error);
    }
}