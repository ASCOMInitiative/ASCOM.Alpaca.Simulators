@page "/setup/v1/Dome/{InstanceID:int}/setup"

@inject IToastService toastService
@inject NavigationManager uriHelper;

<body>
    <fieldset>
        <legend>Shutter Control</legend>

        <input type="number" id="ShutterSlewRate" @bind="ShutterSlewRate">
        <label for="ShutterSlewRate">Slew Rate (deg/sec)</label><br>

        <input type="number" id="ShutterOpenCloseTime" @bind="ShutterOpenCloseTime">
        <label for="ShutterOpenCloseTime">Open/Close time (sec)</label><br>

        <input type="number" id="ShutterMaximumAltitude" @bind="ShutterMaximumAltitude">
        <label for="ShutterMaximumAltitude">Maximum Altitude (deg)</label><br>

        <input type="number" id="ShutterMinimumAltitude" @bind="ShutterMinimumAltitude">
        <label for="ShutterMinimumAltitude">Minimum Altitude (deg)</label><br>
    </fieldset>


    <fieldset>
        <legend>Azimuth Control</legend>

        <input type="number" id="AzimuthSlewRate" @bind="AzimuthSlewRate">
        <label for="AzimuthSlewRate">Slew Rate (deg/sec)</label><br>

        <input type="number" id="AzimuthStepSize" @bind="AzimuthStepSize">
        <label for="AzimuthStepSize">Step Size (deg)</label><br>

        <input type="number" id="AzimuthPark" @bind="AzimuthPark">
        <label for="AzimuthPark">Park Position (deg)</label><br>

        <input type="number" id="AzimuthHome" @bind="AzimuthHome">
        <label for="AzimuthHome">Home Position (deg)</label><br>
    </fieldset>

    <fieldset>
        <legend>Interface Capabilities</legend>

        <input type="checkbox" id="CanFindHome" @bind="CanFindHome">
        <label for="CanFindHome">Can Find Home</label><br>

        <input type="checkbox" id="CanPark" @bind="CanPark">
        <label for="CanPark">Can Park</label><br>

        <input type="checkbox" id="CanSlewAltitude" @bind="CanSlewAltitude">
        <label for="CanSlewAltitude">Can Slew Altitude</label><br>

        <input type="checkbox" id="CanSlewAzimuth" @bind="CanSlewAzimuth">
        <label for="CanSlewAzimuth">Can Slew Azimuth</label><br>

        <input type="checkbox" id="CanOpenCloseShutter" @bind="CanOpenCloseShutter">
        <label for="CanOpenCloseShutter">Can Open Close Shutter</label><br>

        <input type="checkbox" id="CanSetPark" @bind="CanSetPark">
        <label for="CanSetPark">Can Set Park</label><br>

        <input type="checkbox" id="CanSyncAzimuth" @bind="CanSyncAzimuth">
        <label for="CanSyncAzimuth">Can Sync Azimuth</label><br>
    </fieldset>

    <fieldset>
        <legend>Nonstandard Behavior</legend>

        <input type="checkbox" id="AtHomeWithoutFindHome" @bind="AtHomeWithoutFindHome">
        <label for="AtHomeWithoutFindHome">AtHome without FindHome</label><br>

        <input type="checkbox" id="AtParkWithoutPark" @bind="AtParkWithoutPark">
        <label for="AtParkWithoutPark">At Park without Park()</label><br>

        <input type="checkbox" id="StartUpWithShutterError" @bind="StartUpWithShutterError">
        <label for="StartUpWithShutterError">Start up with Shutter Error</label><br>

        <input type="checkbox" id="SlewingOnOpenClose" @bind="SlewingOnOpenClose">
        <label for="SlewingOnOpenClose">Slewing on Open/Close</label><br>
    </fieldset>

    <fieldset>
        <div class="grid-container-two">

            <div class="grid-item-left">
                <button @onclick="Reset">Reset</button>
            </div>
            <div class="grid-item-right">
                <button @onclick="SaveDeviceSettings">Save</button>
            </div>
        </div>
    </fieldset>
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Dome Device
    {
        get
        {
            return DeviceManager.GetDome(InstanceID) as ASCOM.Simulators.Dome;
        }
    }

    protected override void OnInitialized()
    {
        var temp = Device.InterfaceVersion;

        ShutterSlewRate = ASCOM.Simulators.Hardware.g_dAltRate;

        ShutterOpenCloseTime = ASCOM.Simulators.Hardware.g_dOCDelay;

        ShutterMaximumAltitude = ASCOM.Simulators.Hardware.g_dMaxAlt;

        ShutterMinimumAltitude = ASCOM.Simulators.Hardware.g_dMinAlt;

        AzimuthSlewRate = ASCOM.Simulators.Hardware.g_dAzRate;

        AzimuthStepSize = ASCOM.Simulators.Hardware.g_dStepSize;

        AzimuthPark = ASCOM.Simulators.Hardware.g_dSetPark;

        AzimuthHome = ASCOM.Simulators.Hardware.g_dSetHome;

        CanFindHome = ASCOM.Simulators.Hardware.g_bCanFindHome;

        CanPark = ASCOM.Simulators.Hardware.g_bCanPark;

        CanSlewAltitude = ASCOM.Simulators.Hardware.g_bCanSetAltitude;

        CanSlewAzimuth = ASCOM.Simulators.Hardware.g_bCanSetAzimuth;

        CanOpenCloseShutter = ASCOM.Simulators.Hardware.g_bCanSetShutter;

        CanSetPark = ASCOM.Simulators.Hardware.g_bCanSetPark;

        CanSyncAzimuth = ASCOM.Simulators.Hardware.g_bCanSyncAzimuth;

        AtHomeWithoutFindHome = !ASCOM.Simulators.Hardware.g_bStandardAtHome;

        AtParkWithoutPark = !ASCOM.Simulators.Hardware.g_bStandardAtPark;

        StartUpWithShutterError = ASCOM.Simulators.Hardware.g_bStartShutterError;

        SlewingOnOpenClose = ASCOM.Simulators.Hardware.g_bSlewingOpenClose;

        base.OnInitialized();
    }

    #region Connection

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    #endregion

    double ShutterSlewRate
    {
        get;
        set;
    }

    double ShutterOpenCloseTime
    {
        get;
        set;
    }

    double ShutterMaximumAltitude
    {
        get;
        set;
    }

    double ShutterMinimumAltitude
    {
        get;
        set;
    }

    double AzimuthSlewRate
    {
        get;
        set;
    }

    double AzimuthStepSize
    {
        get;
        set;
    }

    double AzimuthPark
    {
        get;
        set;
    }

    double AzimuthHome
    {
        get;
        set;
    }

    bool CanFindHome
    {
        get;
        set;
    }
    bool CanPark
    {
        get;
        set;
    }
    bool CanSlewAltitude
    {
        get;
        set;
    }
    bool CanSlewAzimuth
    {
        get;
        set;
    }
    bool CanOpenCloseShutter
    {
        get;
        set;
    }
    bool CanSetPark
    {
        get;
        set;
    }
    bool CanSyncAzimuth
    {
        get;
        set;
    }

    bool AtHomeWithoutFindHome
    {
        get;
        set;
    }

    bool AtParkWithoutPark
    {
        get;
        set;
    }

    bool StartUpWithShutterError
    {
        get;
        set;
    }

    bool SlewingOnOpenClose
    {
        get;
        set;
    }
    #region Settings

    #endregion

    public void Reset()
    {
        try
        {
            Device.ResetConfig();
            Device.LoadConfig();
            toastService.ShowSuccess("Settings Reset");

            var timer = new System.Threading.Timer(new System.Threading.TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 2000, 2000);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public void SaveDeviceSettings()
    {
        try
        {

            ASCOM.Simulators.Hardware.g_dAltRate = ShutterSlewRate;

            ASCOM.Simulators.Hardware.g_dOCDelay = ShutterOpenCloseTime;

            ASCOM.Simulators.Hardware.g_dMaxAlt = ShutterMaximumAltitude;

            ASCOM.Simulators.Hardware.g_dMinAlt = ShutterMinimumAltitude;

            ASCOM.Simulators.Hardware.g_dAzRate = AzimuthSlewRate;

            ASCOM.Simulators.Hardware.g_dStepSize = AzimuthStepSize;

            ASCOM.Simulators.Hardware.g_dSetPark = AzimuthPark;

            ASCOM.Simulators.Hardware.g_dSetHome = AzimuthHome;

            ASCOM.Simulators.Hardware.g_bCanFindHome = CanFindHome;

            ASCOM.Simulators.Hardware.g_bCanPark = CanPark;

            ASCOM.Simulators.Hardware.g_bCanSetAltitude = CanSlewAltitude;

            ASCOM.Simulators.Hardware.g_bCanSetAzimuth = CanSlewAzimuth;

            ASCOM.Simulators.Hardware.g_bCanSetShutter = CanOpenCloseShutter;

            ASCOM.Simulators.Hardware.g_bCanSetPark = CanSetPark;

            ASCOM.Simulators.Hardware.g_bCanSyncAzimuth = CanSyncAzimuth;

            ASCOM.Simulators.Hardware.g_bStandardAtHome = AtHomeWithoutFindHome;

            ASCOM.Simulators.Hardware.g_bStandardAtPark = AtParkWithoutPark;

            ASCOM.Simulators.Hardware.g_bStartShutterError = StartUpWithShutterError;

            ASCOM.Simulators.Hardware.g_bSlewingOpenClose = SlewingOnOpenClose;

            Device.SaveConfig();

            toastService.ShowSuccess("Settings Saved");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
}