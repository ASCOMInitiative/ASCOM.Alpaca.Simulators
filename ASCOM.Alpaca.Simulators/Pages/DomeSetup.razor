@page "/setup/v1/Dome/{InstanceID:int}/setup"

@inject IToastService toastService
@inject NavigationManager uriHelper;

<body>
    @if (!InstanceExists)
    {
        <h2>Device Instance @InstanceID does not exist in this simulator</h2>
    }
    else
    {
        @if (Device.Connected)
        {
            <fieldset>
                <legend>Device is Connected</legend>
                <p>The device must be disconnected to safely make changes.</p>
            </fieldset>
        }
        <fieldset disabled="@Device.Connected">
            <legend>Shutter Control</legend>

            <label for="ShutterSlewRate">Slew Rate (deg/sec)</label>
            <input type="number" id="ShutterSlewRate" min="0" max="90" @bind="ShutterSlewRate">
            <br>

            <label for="ShutterOpenCloseTime">Open/Close time (sec)</label>
            <input type="number" id="ShutterOpenCloseTime" min="0" max="30" @bind="ShutterOpenCloseTime">
            <br>

            <label for="ShutterMaximumAltitude">Maximum Altitude (deg)</label>
            <input type="number" id="ShutterMaximumAltitude" min="0" max="90" @bind="ShutterMaximumAltitude">
            <br>

            <label for="ShutterMinimumAltitude">Minimum Altitude (deg)</label>
            <input type="number" id="ShutterMinimumAltitude" min="0" max="90" @bind="ShutterMinimumAltitude">
            <br>
        </fieldset>

        <fieldset disabled="@Device.Connected">
            <legend>Azimuth Control</legend>

            <label for="AzimuthSlewRate">Slew Rate (deg/sec)</label>
            <input type="number" id="AzimuthSlewRate" min="0" max="90" @bind="AzimuthSlewRate">
            <br>

            <label for="AzimuthStepSize">Step Size (deg)</label>
            <input type="number" id="AzimuthStepSize" min="0" max="90" @bind="AzimuthStepSize">
            <br>

            <label for="AzimuthPark">Park Position (deg)</label>
            <input type="number" id="AzimuthPark" min="0" max="360" @bind="AzimuthPark">
            <br>

            <label for="AzimuthHome">Home Position (deg)</label>
            <input type="number" id="AzimuthHome" min="0" max="360" @bind="AzimuthHome">
            <br>
        </fieldset>

        <fieldset disabled="@Device.Connected">
            <legend>Interface Capabilities</legend>

            <input type="checkbox" id="CanFindHome" @bind="CanFindHome">
            <label for="CanFindHome">Can Find Home</label>
            <br>

            <input type="checkbox" id="CanPark" @bind="CanPark">
            <label for="CanPark">Can Park</label>
            <br>

            <input type="checkbox" id="CanSlewAltitude" @bind="CanSlewAltitude">
            <label for="CanSlewAltitude">Can Slew Altitude</label>
            <br>

            <input type="checkbox" id="CanSlewAzimuth" @bind="CanSlewAzimuth">
            <label for="CanSlewAzimuth">Can Slew Azimuth</label>
            <br>

            <input type="checkbox" id="CanOpenCloseShutter" @bind="CanOpenCloseShutter">
            <label for="CanOpenCloseShutter">Can Open Close Shutter</label>
            <br>

            <input type="checkbox" id="CanSetPark" @bind="CanSetPark">
            <label for="CanSetPark">Can Set Park</label>
            <br>

            <input type="checkbox" id="CanSyncAzimuth" @bind="CanSyncAzimuth">
            <label for="CanSyncAzimuth">Can Sync Azimuth</label>
            <br>
        </fieldset>

        <fieldset disabled="@Device.Connected">
            <legend>Nonstandard Behavior</legend>

            <input type="checkbox" id="AtHomeWithoutFindHome" @bind="AtHomeWithoutFindHome">
            <label for="AtHomeWithoutFindHome">AtHome without FindHome</label>
            <br>

            <input type="checkbox" id="AtParkWithoutPark" @bind="AtParkWithoutPark">
            <label for="AtParkWithoutPark">At Park without Park()</label>
            <br>

            <input type="checkbox" id="StartUpWithShutterError" @bind="StartUpWithShutterError">
            <label for="StartUpWithShutterError">Start up with Shutter Error</label>
            <br>

            <input type="checkbox" id="SlewingOnOpenClose" @bind="SlewingOnOpenClose">
            <label for="SlewingOnOpenClose">Slewing on Open/Close</label>
            <br>
        </fieldset>

        <fieldset disabled="@Device.Connected">
            <div class="grid-container-two">

                <div class="grid-item-left">
                    <button @onclick="Reset">Reset</button>
                </div>
                <div class="grid-item-right">
                    <button @onclick="SaveDeviceSettings">Save</button>
                </div>
            </div>
        </fieldset>
    }
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    private bool InstanceExists
    {
        get
        {
            return DeviceManager.Domes.ContainsKey(InstanceID);
        }
    }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Dome Device
    {
        get
        {
            return DeviceManager.GetDome((uint)InstanceID) as ASCOM.Simulators.Dome;
        }
    }

    protected override void OnInitialized()
    {
        if (InstanceExists)
        {
            var temp = Device.InterfaceVersion;

            ShutterSlewRate = Device.DomeHardware.AltitudeRate.Value;

            ShutterOpenCloseTime = Device.DomeHardware.OCDelay.Value;

            ShutterMaximumAltitude = Device.DomeHardware.MaximumAltitude.Value;

            ShutterMinimumAltitude = Device.DomeHardware.MinimumAltitude.Value;

            AzimuthSlewRate = Device.DomeHardware.AzimuthRate.Value;

            AzimuthPark = Device.DomeHardware.ParkPosition.Value;

            AzimuthHome = Device.DomeHardware.HomePosition.Value;

            CanFindHome = Device.DomeHardware.CanFindHome.Value;

            CanPark = Device.DomeHardware.CanPark.Value;

            CanSlewAltitude = Device.DomeHardware.CanSetAltitude.Value;

            CanSlewAzimuth = Device.DomeHardware.CanSetAzimuth.Value;

            CanOpenCloseShutter = Device.DomeHardware.CanSetShutter.Value;

            CanSetPark = Device.DomeHardware.CanSetPark.Value;

            CanSyncAzimuth = Device.DomeHardware.CanSyncAzimuth.Value;

            AtHomeWithoutFindHome = !Device.DomeHardware.StandardAtHome.Value;

            AtParkWithoutPark = !Device.DomeHardware.StandardAtPark.Value;

            StartUpWithShutterError = Device.DomeHardware.StartWithShutterError.Value;

            SlewingOnOpenClose = Device.DomeHardware.SlewingTrueWhenOpenOrClose.Value;
        }

        base.OnInitialized();
    }

    #region Connection

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    #endregion

    double ShutterSlewRate
    {
        get;
        set;
    }

    double ShutterOpenCloseTime
    {
        get;
        set;
    }

    double ShutterMaximumAltitude
    {
        get;
        set;
    }

    double ShutterMinimumAltitude
    {
        get;
        set;
    }

    double AzimuthSlewRate
    {
        get;
        set;
    }

    double AzimuthStepSize
    {
        get;
        set;
    }

    double AzimuthPark
    {
        get;
        set;
    }

    double AzimuthHome
    {
        get;
        set;
    }

    bool CanFindHome
    {
        get;
        set;
    }
    bool CanPark
    {
        get;
        set;
    }
    bool CanSlewAltitude
    {
        get;
        set;
    }
    bool CanSlewAzimuth
    {
        get;
        set;
    }
    bool CanOpenCloseShutter
    {
        get;
        set;
    }
    bool CanSetPark
    {
        get;
        set;
    }
    bool CanSyncAzimuth
    {
        get;
        set;
    }

    bool AtHomeWithoutFindHome
    {
        get;
        set;
    }

    bool AtParkWithoutPark
    {
        get;
        set;
    }

    bool StartUpWithShutterError
    {
        get;
        set;
    }

    bool SlewingOnOpenClose
    {
        get;
        set;
    }
    #region Settings

    #endregion

    public void Reset()
    {
        try
        {
            Device.ResetSettings();
            Device.LoadConfig();
            toastService.ShowSuccess("Settings Reset");

            var timer = new System.Threading.Timer(new System.Threading.TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 2000, 2000);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public void SaveDeviceSettings()
    {
        try
        {
            if (ShutterSlewRate <= 0)
            {
                toastService.ShowWarning("The Shutter Slew Rate must be greater than 0.");
                return;
            }

            if (ShutterOpenCloseTime <= 0)
            {
                toastService.ShowWarning("The Shutter Open Close Time must be greater than 0.");
                return;
            }

            if (ShutterMaximumAltitude <= ShutterMinimumAltitude)
            {
                toastService.ShowWarning("The Maximum Altitude must be greater than the Minimum.");
                return;
            }

            if (AzimuthSlewRate <= 0)
            {
                toastService.ShowWarning("The Azimuth Slew Rate must be greater than 0.");
                return;
            }

            if (AzimuthStepSize <= 0)
            {
                toastService.ShowWarning("The Azimuth Step Size must be greater than 0.");
                return;
            }

            if (AzimuthPark < 0 || AzimuthPark > 360)
            {
                toastService.ShowWarning("The Azimuth Park position must be between 0 and 360.");
                return;
            }

            if (AzimuthHome < 0 || AzimuthHome > 360)
            {
                toastService.ShowWarning("The Azimuth Home position must be between 0 and 360.");
                return;
            }

            Device.DomeHardware.AltitudeRate.Value = ShutterSlewRate;

            Device.DomeHardware.OCDelay.Value = ShutterOpenCloseTime;

            Device.DomeHardware.MaximumAltitude.Value = ShutterMaximumAltitude;

            Device.DomeHardware.MinimumAltitude.Value = ShutterMinimumAltitude;

            Device.DomeHardware.AzimuthRate.Value = AzimuthSlewRate;

            Device.DomeHardware.ParkPosition.Value = AzimuthPark;

            Device.DomeHardware.HomePosition.Value = AzimuthHome;

            Device.DomeHardware.CanFindHome.Value = CanFindHome;

            Device.DomeHardware.CanPark.Value = CanPark;

            Device.DomeHardware.CanSetAltitude.Value = CanSlewAltitude;

            Device.DomeHardware.CanSetAzimuth.Value = CanSlewAzimuth;

            Device.DomeHardware.CanSetShutter.Value = CanOpenCloseShutter;

            Device.DomeHardware.CanSetPark.Value = CanSetPark;

            Device.DomeHardware.CanSyncAzimuth.Value = CanSyncAzimuth;

            Device.DomeHardware.StandardAtHome.Value = AtHomeWithoutFindHome;

            Device.DomeHardware.StandardAtPark.Value = AtParkWithoutPark;

            Device.DomeHardware.StartWithShutterError.Value = StartUpWithShutterError;

            Device.DomeHardware.SlewingTrueWhenOpenOrClose.Value = SlewingOnOpenClose;

            Device.SaveConfig();

            toastService.ShowSuccess("Settings Saved");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
}