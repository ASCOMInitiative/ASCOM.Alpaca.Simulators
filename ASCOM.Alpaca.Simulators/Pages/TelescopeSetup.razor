@page "/setup/v1/Telescope/{InstanceID:int}/setup"

@inject IToastService toastService
@inject NavigationManager uriHelper;

<body>
    <fieldset>
        <legend>Telescope Settings</legend>

        <input type="checkbox" id="AutoUnpark" @bind="AutoUnpark">
        <label for="AutoUnpark">Auto Unpark / Track on Start</label>
        <br>

        <input type="checkbox" id="NoCoordinates" @bind="NoCoordinates">
        <label for="NoCoordinates">No Coordinates while Parked</label>
        <br>

        <input type="checkbox" id="DisconnectOnPark" @bind="DisconnectOnPark">
        <label for="DisconnectOnPark">Disconnect On Park</label>
        <br>

        <label for="SlewRate">Slew Rate (deg/sec)</label>
        <input type="number" id="SlewRate" @bind="SlewRate">
        <br>

        <input type="checkbox" id="RefractionOn" @bind="RefractionOn">
        <label for="RefractionOn">Refraction On</label>
        <br>

    </fieldset>

    <fieldset>
        <legend>Site Information</legend>

        <label for="LatitudeSign">Latitude</label>
        <select id="LatitudeSign" @bind="LatitudeSign">
            <option value="1">N</option>
            <option value="-1">S</option>
        </select>
        <input type="number" @bind="LatitudeDegrees">
        <input type="number" @bind="LatitudeMinutes">
        <br>

        <label for="LongitudeSign">Longitude</label>
        <select id="LongitudeSign" @bind="LongitudeSign">
            <option value="1">E</option>
            <option value="-1">W</option>
        </select>
        <input type="number" @bind="LongitudeDegrees">
        <input type="number" @bind="LongitudeMinutes">
        <br>

        <label for="Elevation">Elevation</label>
        <input type="number" id="Elevation" @bind="Elevation">
        <br>
    </fieldset>

    <fieldset>
        <legend>Mount Type</legend>
        <select id="MountType" @bind="MountType">
            <option value="AltAz">Alt-Azimuth</option>
            <option value="Polar">Equatorial</option>
            <option value="GermanPolar">German Equatorial</option>
        </select>
    </fieldset>

    <fieldset>
        <legend>Optics</legend>

        <label for="Aperture">Aperture (m)</label>
        <input type="number" id="Aperture" @bind="Aperture">
        <br>

        <label for="ApertureArea">ApertureArea (m^2)</label>
        <input type="number" id="ApertureArea" @bind="ApertureArea">
        <br>

        <label for="FocalLength">FocalLength (m)</label>
        <input type="number" id="FocalLength" @bind="FocalLength">
        <br>
    </fieldset>

    <fieldset>
        <legend>Interface</legend>
    </fieldset>

    <fieldset>
        <legend>Park, Home and Startup</legend>

        <label for="StartupMode">Startup Mode</label>
        <select id="StartupMode" @bind="StartupMode">
            @foreach (var mode in ASCOM.Simulators.TelescopeHardware.StartupOptions)
            {
                <option value="@mode">@mode</option>
            }
        </select>
        <br>

        <label>Startup Position</label>
        <br>


        <input type="number" id="StartupAzimuth" @bind="StartupAzimuth">
        <label for="StartupAzimuth">Azimuth (deg)</label>
        <br>

        <input type="number" id="StartupAltitude" @bind="StartupAltitude">
        <label for="StartupAltitude">Altitude  (deg)</label>

        <br>
        <br>


        <label>Park Position</label>
        <br>


        <input type="number" id="ParkAzimuth" @bind="ParkAzimuth">
        <label for="ParkAzimuth">Azimuth (deg)</label>
        <br>

        <input type="number" id="ParkAltitude" @bind="ParkAltitude">
        <label for="ParkAltitude">Altitude  (deg)</label>

        <br>
        <br>

        <label>Home Position</label>
        <br>

        <input type="number" id="HomeAzimuth" @bind="HomeAzimuth">
        <label for="HomeAzimuth">Azimuth (deg)</label>
        <br>

        <input type="number" id="HomeAltitude" @bind="HomeAltitude">
        <label for="HomeAltitude">Altitude  (deg)</label>

        <br>

    </fieldset>

    <fieldset>
        <div class="grid-container-two">

            <div class="grid-item-left">
                <button @onclick="Reset">Reset</button>
            </div>
            <div class="grid-item-right">
                <button @onclick="SaveDeviceSettings">Save</button>
            </div>
        </div>
    </fieldset>
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Telescope Device
    {
        get
        {
            return DeviceManager.GetTelescope(InstanceID) as ASCOM.Simulators.Telescope;
        }
    }

    protected override void OnInitialized()
    {

        base.OnInitialized();
    }

    #region Connection

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    #endregion

    #region Settings

    bool AutoUnpark
    {
        get;
        set;
    }

    bool NoCoordinates
    {
        get;
        set;
    }

    bool DisconnectOnPark
    {
        get;
        set;
    }

    double SlewRate
    {
        get;
        set;
    }

    bool RefractionOn
    {
        get;
        set;
    }

    int LatitudeSign
    {
        get;
        set;
    }

    int LatitudeDegrees
    {
        get;
        set;
    }

    double LatitudeMinutes
    {
        get;
        set;
    }

    int LongitudeSign
    {
        get;
        set;
    }

    int LongitudeDegrees
    {
        get;
        set;
    }

    double LongitudeMinutes
    {
        get;
        set;
    }

    int Elevation
    {
        get;
        set;
    }

    ASCOM.Standard.Interfaces.AlignmentMode MountType
    {
        get;
        set;
    }

    double Aperture
    {
        get;
        set;
    }

    double ApertureArea
    {
        get;
        set;
    }

    double FocalLength
    {
        get;
        set;
    }

    string StartupMode
    {
        get;
        set;
    }

    double StartupAzimuth
    {
        get;
        set;
    }

    double StartupAltitude
    {
        get;
        set;
    }

    double ParkAzimuth
    {
        get;
        set;
    }

    double ParkAltitude
    {
        get;
        set;
    }

    double HomeAzimuth
    {
        get;
        set;
    }

    double HomeAltitude
    {
        get;
        set;
    }
    #endregion

    public void Reset()
    {
        try
        {
            toastService.ShowSuccess("Settings Reset");

            var timer = new System.Threading.Timer(new System.Threading.TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 2000, 2000);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public void SaveDeviceSettings()
    {
        try
        {
            toastService.ShowSuccess("Settings Saved");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
}