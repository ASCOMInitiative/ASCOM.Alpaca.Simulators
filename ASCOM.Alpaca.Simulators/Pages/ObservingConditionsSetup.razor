@page "/setup/v1/ObservingConditions/{InstanceID:int}/setup"

@inject IToastService toastService
@inject NavigationManager uriHelper;

<body>
    @if (Device.Connected)
    {
        <fieldset>
            <legend>Device is Connected</legend>
            <p>The device must be disconnected in order to safely make changes.</p>
        </fieldset>
    }
    <fieldset disabled="@Device.Connected">
        <legend>General Settings</legend>

        <label for="SensorQueryInterval">Sensor Query Interval (seconds)</label>
        <input type="number" id="SensorQueryInterval" min="0" max="300" step="1" @bind="SensorQueryInterval">
        <br>

        <label for="AveragePeriod">Average Period (hours)</label>
        <input type="number" id="AveragePeriod" min="0" max="24" step=".1" @bind="AveragePeriod">
        <br>

        <label for="NumberOfReadings">Number of readings in average period</label>
        <input type="number" id="NumberOfReadings" min="0" max="128" step="1" @bind="NumberOfReadings">
        <br>

    </fieldset>
    <fieldset disabled="@Device.Connected">
        <legend>Sensor Settings</legend>

        <table style="width:100%">
            <tr>
                <th></th>
                <th>Enabled</th>
                <th>Min</th>
                <th>Max</th>
                <th>Unit</th>
                <th>Time</th>
                <th>Delay</th>
            </tr>
            @{
                @foreach (var dev in Sensors)
                {
                    if (dev.Key == "DewPoint")
                    {
                        continue;
                    }
                    <tr>

                        <th>@dev.Value.SensorName</th>
                        <th><input type="checkbox" @bind="@Sensors[dev.Key].IsImplemented"></th>
                        <th><input type="number" @bind="@Sensors[dev.Key].SimFromValue" max="@Sensors[dev.Key].SimToValue" class="oc-number"></th>
                        <th><input type="number" @bind="@Sensors[dev.Key].SimToValue" min="@Sensors[dev.Key].SimFromValue" class="oc-number"></th>
                        <th>@Sensors[dev.Key].Unit</th>
                        <th><input type="number" @bind="@Sensors[dev.Key].ValueCycleTime" min="0" max="3600" step="1" class="oc-number"></th>
                        <th><input type="number" @bind="@Sensors[dev.Key].NotReadyDelay" min="0" max="120" step="1" class="oc-number"></th>
                    </tr>
                }
            }
        </table>
    </fieldset>

    <fieldset disabled="@Device.Connected">
        <div class="grid-container-two">

            <div class="grid-item-left">
                <button @onclick="Reset">Reset</button>
            </div>
            <div class="grid-item-right">
                <button @onclick="SaveDeviceSettings">Save</button>
            </div>
        </div>
    </fieldset>
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.ObservingConditions Device
    {
        get
        {
            return DeviceManager.GetObservingConditions(InstanceID) as ASCOM.Simulators.ObservingConditions;
        }
    }

    Dictionary<string, ASCOM.Simulators.Sensor> Sensors
    {
        get;
    } = new Dictionary<string, ASCOM.Simulators.Sensor>();

    protected override void OnInitialized()
    {
        var interfaceversion = Device.InterfaceVersion;

        SensorQueryInterval = ASCOM.Simulators.OCSimulator.SensorQueryInterval;

        AveragePeriod = ASCOM.Simulators.OCSimulator.AveragePeriod;

        NumberOfReadings = ASCOM.Simulators.OCSimulator.NumberOfReadingsToAverage;

        foreach (var sensor in ASCOM.Simulators.OCSimulator.Sensors)
        {
            Sensors.Add(sensor.Key, sensor.Value);
        }
        base.OnInitialized();
    }

    #region Connection

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    #endregion

    #region Settings
    double SensorQueryInterval
    {
        get;
        set;
    }

    double AveragePeriod
    {
        get;
        set;
    }

    int NumberOfReadings
    {
        get;
        set;
    }

    #endregion

    public void Reset()
    {
        try
        {
            ASCOM.Simulators.OCSimulator.ClearProfile();
            ASCOM.Simulators.OCSimulator.Init();
            toastService.ShowSuccess("Settings Reset");

            var timer = new System.Threading.Timer(new System.Threading.TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 2000, 2000);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public void SaveDeviceSettings()
    {
        try
        {

            foreach (var sensor in Sensors)
            {
                if(sensor.Key == "DewPoint")
                {
                    continue;
                }
                if(sensor.Value.SimFromValue >= sensor.Value.SimToValue)
                {
                    toastService.ShowWarning($"Sensor {sensor.Key} must have the Max be greater than the Min.");
                    return;
                }

                if(sensor.Value.NotReadyDelay < 0)
                {
                    toastService.ShowWarning($"Sensor {sensor.Key} must have the Delay be greater than 0.");
                    return;
                }

                if (sensor.Value.ValueCycleTime < 0)
                {
                    toastService.ShowWarning($"Sensor {sensor.Key} must have the Delay be greater than 0.");
                    return;
                }
            }

            if (SensorQueryInterval < 0)
            {
                toastService.ShowWarning($"The Sensor Query Interval must be greater than 0.");
                return;
            }

            if (AveragePeriod < 0)
            {
                toastService.ShowWarning($"The Average Period must be greater than 0.");
                return;
            }

            if (NumberOfReadings < 0)
            {
                toastService.ShowWarning($"The Number Of Readings must be greater than 0.");
                return;
            }

            ASCOM.Simulators.OCSimulator.SensorQueryInterval = SensorQueryInterval;

            ASCOM.Simulators.OCSimulator.AveragePeriod = AveragePeriod;

            ASCOM.Simulators.OCSimulator.NumberOfReadingsToAverage = NumberOfReadings;

            foreach (var sensor in Sensors)
            {
                ASCOM.Simulators.OCSimulator.Sensors[sensor.Key].SimFromValue = sensor.Value.SimFromValue;
                ASCOM.Simulators.OCSimulator.Sensors[sensor.Key].SimToValue = sensor.Value.SimToValue;
                ASCOM.Simulators.OCSimulator.Sensors[sensor.Key].IsImplemented = sensor.Value.IsImplemented;
                ASCOM.Simulators.OCSimulator.Sensors[sensor.Key].NotReadyDelay = sensor.Value.NotReadyDelay;
                ASCOM.Simulators.OCSimulator.Sensors[sensor.Key].ValueCycleTime = sensor.Value.ValueCycleTime;
            }


            ASCOM.Simulators.OCSimulator.Sensors[ASCOM.Simulators.OCSimulator.PROPERTY_DEWPOINT].SimFromValue = ASCOM.Simulators.OCSimulator.Sensors[ASCOM.Simulators.OCSimulator.PROPERTY_HUMIDITY].SimFromValue;
            ASCOM.Simulators.OCSimulator.Sensors[ASCOM.Simulators.OCSimulator.PROPERTY_DEWPOINT].SimToValue = ASCOM.Simulators.OCSimulator.Sensors[ASCOM.Simulators.OCSimulator.PROPERTY_HUMIDITY].SimToValue;
            ASCOM.Simulators.OCSimulator.Sensors[ASCOM.Simulators.OCSimulator.PROPERTY_DEWPOINT].IsImplemented = ASCOM.Simulators.OCSimulator.Sensors[ASCOM.Simulators.OCSimulator.PROPERTY_HUMIDITY].IsImplemented;
            ASCOM.Simulators.OCSimulator.Sensors[ASCOM.Simulators.OCSimulator.PROPERTY_DEWPOINT].NotReadyDelay = ASCOM.Simulators.OCSimulator.Sensors[ASCOM.Simulators.OCSimulator.PROPERTY_HUMIDITY].NotReadyDelay;
            ASCOM.Simulators.OCSimulator.Sensors[ASCOM.Simulators.OCSimulator.PROPERTY_DEWPOINT].ValueCycleTime = ASCOM.Simulators.OCSimulator.Sensors[ASCOM.Simulators.OCSimulator.PROPERTY_HUMIDITY].ValueCycleTime;

            ASCOM.Simulators.OCSimulator.WriteProfile();

            toastService.ShowSuccess("Settings Saved");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
}