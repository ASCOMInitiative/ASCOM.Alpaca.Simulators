@page "/control/v1/telescope/{InstanceID:int}/"

@inject IToastService toastService
@inject NavigationManager uriHelper;
@using System.Timers;

<body>
    <fieldset>
        <legend>Telescope</legend>
        <div class="grid-container-two">

            <div class="grid-item-left">
                <svg width="30" height="30">
                    <circle cx="15" cy="15" r="11" style="fill:@ConnectionColor;stroke-width:3;stroke:rgb(0,0,0)" />
                </svg>
                <button @onclick="Connect">@ConnectText</button>
            </div>
            <div class="grid-item-right">
                <button @onclick="Setup">Setup</button>
            </div>
        </div>
        <div class="grid-container-two">

            <div class="grid-item-right">
                <label>LST</label>
            </div>
            <div class="grid-item-left">
                <p>@LSTText</p>
            </div>

            <div class="grid-item-right">
                <label>RA</label>
            </div>
            <div class="grid-item-left">
                <p>@RAText</p>
            </div>

            <div class="grid-item-right">
                <label>Dec</label>
            </div>
            <div class="grid-item-left">
                <p>@DecText</p>
            </div>

            <div class="grid-item-right">
                <label>Az</label>
            </div>
            <div class="grid-item-left">
                <p>@AzText</p>
            </div>

            <div class="grid-item-right">
                <label>Alt</label>
            </div>
            <div class="grid-item-left">
                <p>@AltText</p>
            </div>
        </div>
        <div class="centered">
            <label style="color:@SlewColor">@SlewText</label>&nbsp;
            <label style="color:@HomeColor">@HomeText</label>&nbsp;
            <label style="color:@ParkColor">@ParkText</label>
        </div>
    </fieldset>
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Telescope Device
    {
        get
        {
            return DeviceManager.GetTelescope(InstanceID) as ASCOM.Simulators.Telescope;
        }
    }

    Timer timer = new Timer(100);

    public void Dispose()
    {
        timer.Elapsed -= OnPageRefresh;
        timer.Stop();
    }

    protected override void OnInitialized()
    {
        timer.Elapsed += OnPageRefresh;
        timer.AutoReset = true;
        timer.Enabled = true;
        base.OnInitialized();
    }

    private void OnPageRefresh(Object source, ElapsedEventArgs e)
    {
        try
        {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch
                {

                }
            });
        }
        catch
        {

        }
    }

    #region Control

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }


    string LSTText
    {
        get
        {
            if (Connected)
            {
                return new ASCOM.Standard.Utilities.Utilities().HoursToHMS(ASCOM.Simulators.TelescopeHardware.SiderealTime);
            }
            return "00:00:00";
        }
    }

    string RAText
    {
        get
        {
            if (Connected)
            {
                return new ASCOM.Standard.Utilities.Utilities().HoursToHMS(ASCOM.Simulators.TelescopeHardware.RightAscension);
            }
            return "00:00:00";
        }
    }

    string DecText
    {
        get
        {
            if (Connected)
            {
                return new ASCOM.Standard.Utilities.Utilities().DegreesToDMS(ASCOM.Simulators.TelescopeHardware.Declination);
            }
            return "+00:00:00";
        }
    }

    string AltText
    {
        get
        {
            if (Connected)
            {
                return new ASCOM.Standard.Utilities.Utilities().DegreesToDMS(ASCOM.Simulators.TelescopeHardware.Altitude);
            }
            return "+00:00:00";
        }
    }

    string AzText
    {
        get
        {
            if (Connected)
            {
                return new ASCOM.Standard.Utilities.Utilities().DegreesToDMS(ASCOM.Simulators.TelescopeHardware.Azimuth);
            }
            return "000:00:00";
        }
    }

    public string SlewText
    {
        get
        {
            if (Connected)
            {
                if (Device.Slewing)
                {
                    return "Slewing";
                }
            }
            return "Not Slewing";
        }
    }

    public string SlewColor
    {
        get
        {
            if (Connected)
            {
                if (Device.Slewing)
                {
                    return "Green";
                }
            }
            return "Red";
        }
    }

    public string HomeText
    {
        get
        {
            if (Connected)
            {
                if (Device.AtHome)
                {
                    return "At Home";
                }
            }
            return "Not At Home";
        }
    }

    public string HomeColor
    {
        get
        {
            if (Connected)
            {
                if (Device.AtHome)
                {
                    return "Green";
                }
            }
            return "Red";
        }
    }

    public string ParkText
    {
        get
        {
            if (Connected)
            {
                if (Device.AtPark)
                {
                    return "Parked";
                }
            }
            return "Not Parked";
        }
    }

    public string ParkColor
    {
        get
        {
            if (Connected)
            {
                if (Device.AtPark)
                {
                    return "Green";
                }
            }
            return "Red";
        }
    }

    #endregion

    public void Setup()
    {
        uriHelper.NavigateTo($"/setup/v1/telescope/{InstanceID}/setup");
    }

    public void DisplayError(string error)
    {
        toastService.ShowError(error);
    }
}