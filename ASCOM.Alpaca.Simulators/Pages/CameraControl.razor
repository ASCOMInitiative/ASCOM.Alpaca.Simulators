@page "/control/v1/camera/{InstanceID:int}/"

@inject IToastService toastService
@inject NavigationManager uriHelper;
@using System.Timers;

<body>
        @if (!InstanceExists)
    {
        <h2>Device Instance @InstanceID does not exist in this simulator</h2>
    }
    else
    {
    <fieldset>
        <legend>Camera</legend>
        <div class="grid-container-two">

            <div class="grid-item-left">
                <svg width="30" height="30">
                    <circle cx="15" cy="15" r="11" style="fill:@ConnectionColor;stroke-width:3;stroke:rgb(0,0,0)" />
                </svg>
                <button @onclick="Connect">@ConnectText</button>
            </div>
            <div class="grid-item-right">
                <button @onclick="Setup">Setup</button>
            </div>
        </div>

        <div class="grid-container-two">

            <div class="grid-item-right">
                Camera State:
            </div>
            <div class="grid-item-left">
                @CameraStateText
            </div>

            <div class="grid-item-right">
                Cooler State:
            </div>
            <div class="grid-item-left">
                @CoolerStateText
            </div>

            <div class="grid-item-right">
                Cooler Power:
            </div>
            <div class="grid-item-left">
                @CoolerPowerText
            </div>

            <div class="grid-item-right">
                Heat Sink Temperature:
            </div>
            <div class="grid-item-left">
                @HeatSinkTemperatureText
            </div>

            <div class="grid-item-right">
                Image Ready:
            </div>
            <div class="grid-item-left">
                @ImageReadyText
            </div>

            <div class="grid-item-right">
                Percent Complete:
            </div>
            <div class="grid-item-left">
                @PercentCompleteText
            </div>
        </div>
    </fieldset>
    }
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    private bool InstanceExists
    {
        get
        {
            return DeviceManager.Cameras.ContainsKey(InstanceID);
        }
    }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Camera Device
    {
        get
        {
            return DeviceManager.GetCamera((uint)InstanceID) as ASCOM.Simulators.Camera;
        }
    }

    Timer timer = new Timer(250);

    public void Dispose()
    {
        timer.Elapsed -= OnPageRefresh;
        timer.Stop();
    }

    protected override void OnInitialized()
    {
        timer.Elapsed += OnPageRefresh;
        timer.AutoReset = true;
        timer.Enabled = true;
        base.OnInitialized();
    }

    private void OnPageRefresh(Object source, ElapsedEventArgs e)
    {
        try
        {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch
                {

                }
            });
        }
        catch
        {

        }
    }

    #region Control

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    string CameraStateText
    {
        get
        {
            try
            {
                if (Connected)
                {
                    return Device.CameraState.ToString();
                }
                return "Not Available";
            }
            catch
            {

            }
            return "Not Available";
        }
    }

    string CoolerStateText
    {
        get
        {
            try
            {
                if (Connected)
                {
                    if (Device.CoolerOn)
                    {
                        return "On";
                    }
                    return "Off";
                }
                return "Not Available";
            }
            catch
            {

            }
            return "Not Available";
        }
    }

    string CoolerPowerText
    {
        get
        {
            try
            {
                if (Connected)
                {
                    return Device.CoolerPower.ToString();
                }
            }
            catch
            {

            }
            return "Not Available";
        }
    }

    string HeatSinkTemperatureText
    {
        get
        {
            try
            {
                if (Connected)
                {
                    return Device.HeatSinkTemperature.ToString();
                }
            }
            catch
            {

            }
            return "Not Available";
        }
    }

    string ImageReadyText
    {
        get
        {
            try
            {
                if (Connected)
                {
                    if (Device.ImageReady)
                    {
                        return "Image Ready";
                    }
                    return "No Image";
                }
            }
            catch
            {

            }
            return "Not Available";
        }
    }

    string PercentCompleteText
    {
        get
        {
            try
            {
                if (Connected)
                {
                    return Device.PercentCompleted.ToString();
                }
            }
            catch
            {

            }
            return "Not Available";
        }
    }



    #endregion

    public void Setup()
    {
        uriHelper.NavigateTo($"/setup/v1/camera/{InstanceID}/setup");
    }

    public void DisplayError(string error)
    {
        toastService.ShowError(error);
    }
}