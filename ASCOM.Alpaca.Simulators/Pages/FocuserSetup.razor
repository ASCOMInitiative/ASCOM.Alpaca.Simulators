@page "/setup/v1/Focuser/{InstanceID:int}/setup"

@inject IToastService toastService
@inject NavigationManager uriHelper;

<body>
    @if (Device.Connected)
    {
        <fieldset>
            <legend>Device is Connected</legend>
            <p>The device must be disconnected in order to safely make changes.</p>
        </fieldset>
    }
    <fieldset disabled="@Device.Connected">
        <legend>Focuser Settings</legend>

        <label for="maxPosition"> Maximum Pos (steps):</label>
        <input type="number" id="maxPosition" name="maxPosition" min="0" @bind="maxPosition">
        <br>

        <label for="stepSize"> Step Size (microns):</label>
        <input type="number" id="stepSize" name="stepSize" min="0" @bind="stepSize">
        <br>

        <label for="maxIncrement"> Maximum Increment:</label>
        <input type="number" id="maxIncrement" name="maxIncrement" min="0" @bind="maxIncrement">
        <br>

        <label for="settleTime"> Settle Time (ms):</label>
        <input type="number" id="settleTime" name="settleTime" min="0" @bind="settleTime">
        <br>
    </fieldset>
    <fieldset disabled="@Device.Connected">
        <legend>Capabilities</legend>

        <input type="checkbox" id="tempProbe" name="tempProbe" @bind="tempProbe">
        <label for="tempProbe"> Temperature Probe</label><br>

        <input type="checkbox" id="tempComp" name="tempComp" @bind="tempComp">
        <label for="tempComp"> Temperature Compensation</label><br>

        <input type="checkbox" id="implementsStepSize" name="implementsStepSize" @bind="ImplementsStepSize">
        <label for="implementsStepSize">Step Size</label><br>

        <input type="checkbox" id="halt" name="halt" @bind="Halt">
        <label for="halt"> Halt</label><br>

        <input type="checkbox" id="synchronous" name="synchronous" @bind="Synchronous">
        <label for="synchronous"> Synchronous</label><br>
    </fieldset>
    <fieldset disabled="@Device.Connected">
        <legend>Temperature Simulator</legend>

        <label for="currentTemp"> Current Temperature (C):</label>
        <input type="number" id="currentTemp" min="@MinimumTemperature" max="@MaxTemperature" @bind="CurrentTemperature">
        <br>

        <label for="maxTemp"> Maximum Temperature (C):</label>
        <input type="number" id="maxTemp" min="@MinimumTemperature" max="100" @bind="MaxTemperature">
        <br>

        <label for="minTemp"> Minimum Temperature (C):</label>
        <input type="number" id="minTemp" min="-273" max="@MaxTemperature" @bind="MinimumTemperature">
        <br>

        <label for="cyclePeriod"> Cycle Period (sec):</label>
        <input type="number" id="cyclePeriod" min="0" @bind="CyclePeriod">
        <br>

        <label for="steps"> Steps / C:</label>
        <input type="number" id="steps" @bind="StepsPerC">
        <br>
    </fieldset>
    <fieldset disabled="@Device.Connected">
        <legend>Type</legend>

        <input type="checkbox" id="absolute" @bind="Absolute">
        <label for="absolute">Absolute</label><br>
        <input type="checkbox" id="relative" @bind="Relative">
        <label for="relative">Relative</label><br>
    </fieldset>

    <fieldset disabled="@Device.Connected">
        <div class="grid-container-two">

            <div class="grid-item-left">
                <button @onclick="Reset">Reset</button>
            </div>
            <div class="grid-item-right">
                <button @onclick="SaveDeviceSettings">Save</button>
            </div>
        </div>
    </fieldset>
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.Focuser Device
    {
        get
        {
            return DeviceManager.GetFocuser((uint)InstanceID) as ASCOM.Simulators.Focuser;
        }
    }

    protected override void OnInitialized()
    {
        maxPosition = Device.MaxStep;
        stepSize = Device.InternalStepSize;

        maxIncrement = Device.MaxIncrement;

        settleTime = Device.SettleTime;

        tempProbe = Device.TempProbe;

        tempComp = Device.TempComp;

        ImplementsStepSize = Device.CanStepSize;

        Halt = Device.CanHalt;

        Synchronous = Device.Synchronous;

        CurrentTemperature = Device.Temperature;

        MaxTemperature = Device.TempMax;

        MinimumTemperature = Device.TempMin;

        CyclePeriod = Device.TempPeriod;

        StepsPerC = Device.TempSteps;

        Absolute = Device.Absolute;

        Relative = !Device.Absolute;

        base.OnInitialized();
    }

    #region Connection

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    #endregion

    #region Settings

    int maxPosition
    {
        get;
        set;
    }

    double stepSize
    {
        get;
        set;
    }

    int maxIncrement
    {
        get;
        set;
    }

    int settleTime
    {
        get;
        set;
    }

    bool tempProbe
    {
        get;
        set;
    }

    bool tempComp
    {
        get;
        set;
    }

    bool ImplementsStepSize
    {
        get;
        set;
    }

    bool Halt
    {
        get;
        set;
    }

    bool Synchronous
    {
        get;
        set;
    }

    double CurrentTemperature
    {
        get;
        set;
    }

    double MaxTemperature
    {
        get;
        set;
    }

    double MinimumTemperature
    {
        get;
        set;
    }

    double CyclePeriod
    {
        get;
        set;
    }

    int StepsPerC
    {
        get;
        set;
    }

    bool Absolute
    {
        get;
        set;
    }

    bool Relative
    {
        get
        {
            return !Absolute;
        }

        set
        {
            Absolute = !value;
        }
    }

    #endregion

    public void Reset()
    {
        try
        {
            Device.Reset();
            toastService.ShowSuccess("Settings Reset");

            var timer = new System.Threading.Timer(new System.Threading.TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 2000, 2000);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public void SaveDeviceSettings()
    {
        try
        {
            if(MinimumTemperature >= MaxTemperature)
            {
                toastService.ShowWarning("The minimum temperature must be less then the maximum.");
                return;
            }

            if(maxPosition <= 0)
            {
                toastService.ShowWarning("The maximum position must be greater then 0.");
                return;
            }

            if (maxIncrement <= 0 || maxIncrement > maxPosition)
            {
                toastService.ShowWarning("The maximum increment must be between zero and the maximum position.");
                return;
            }

            if (stepSize <= 0)
            {
                toastService.ShowWarning("The step size must be greater then 0.");
                return;
            }

            if (settleTime <= 0)
            {
                toastService.ShowWarning("The settle time must be greater then 0.");
                return;
            }

            Device.MaxStep = maxPosition;
            Device.StepSize = stepSize;
            Device.MaxIncrement = maxIncrement;
            Device.SettleTime = settleTime;
            Device.TempProbe = tempProbe;
            Device.TempComp = tempComp;
            Device.CanStepSize = ImplementsStepSize;
            Device.CanHalt = Halt;
            Device.Synchronous = Synchronous;
            Device.Temperature = CurrentTemperature;

            Device.TempMax = MaxTemperature;

            Device.TempMin = MinimumTemperature;

            Device.TempPeriod = CyclePeriod;

            Device.TempSteps = StepsPerC;

            Device.Absolute = Absolute;

            Device.SaveProfileSettings();

            toastService.ShowSuccess("Settings Saved");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
}