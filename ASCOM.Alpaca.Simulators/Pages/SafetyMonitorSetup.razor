@page "/setup/v1/SafetyMonitor/{InstanceID:int}/setup"
@page "/control/v1/SafetyMonitor/{InstanceID:int}"

@inject IToastService toastService
@inject NavigationManager uriHelper;
@using System.Timers;

<body>
    @if (!InstanceExists)
    {
        <h2>Device Instance @InstanceID does not exist in this simulator</h2>
    }
    else
    {
        <fieldset>
            @if (InstanceID == 0)
            {
                <legend>Safety Monitor</legend>
            }
            else
            {
                <legend>Safety Monitor @InstanceID</legend>
            }
            <div class="grid-container-two">
                <div class="grid-item-left">
                    <svg width="30" height="30">
                        <circle cx="15" cy="15" r="11" style="fill:@ConnectionColor;stroke-width:3;stroke:rgb(0,0,0)" />
                    </svg>
                    <button @onclick="Connect">@ConnectText</button>
                </div>
                <div class="grid-item-right">
                    <ErrorBoundary>
                        <LogLevelControl Driver="@(Device as OmniSim.BaseDriver.Driver)" />
                    </ErrorBoundary>
                </div>
            </div>

            <div class="grid-container-two">
                <div class="grid-item-right">
                    <span>Is Safe Value:</span>
                </div>
                <div class="grid-item-left">
                    <input type="checkbox" @bind="@IsSafe">
                </div>
                <div class="grid-item-right">
                    <span>Reset Profile:</span>
                </div>
                <div class="grid-item-left">
                    <button @onclick="Reset">Reset</button>
                </div>
            </div>
        </fieldset>
    }
</body>

@code {
    [Parameter]
    public int InstanceID { get; set; }

    private bool InstanceExists
    {
        get
        {
            return DeviceManager.SafetyMonitors.ContainsKey(InstanceID);
        }
    }

    Timer timer = new Timer(100);

    /// <summary>
    /// This access the device type not the interface to allow the device specific settings to be accessed.
    /// </summary>
    private ASCOM.Simulators.SafetyMonitor Device
    {
        get
        {
            return DeviceManager.GetSafetyMonitor((uint)InstanceID) as ASCOM.Simulators.SafetyMonitor;
        }
    }

    public void Dispose()
    {
        timer.Elapsed -= OnPageRefresh;
        timer.Stop();
    }

    protected override void OnInitialized()
    {
        timer.Elapsed += OnPageRefresh;
        timer.AutoReset = true;
        timer.Enabled = true;
        base.OnInitialized();
    }

    private void OnPageRefresh(Object source, ElapsedEventArgs e)
    {
        try
        {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch
                {

                }
            });
        }
        catch
        {

        }
    }

    public bool Connected
    {
        get
        {
            return Device.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (Device.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        Device.Connected = !Device.Connected;
    }

    public bool IsSafe
    {
        get
        {
            if (Device.Connected)
            {
                return Device.IsSafe;
            }
            return false;
        }
        set
        {
            Device.IsSafeSetting.Value = value;
            Device.SaveProfileSettings();
        }
    }

    public void Reset()
    {
        try
        {
            Device.ResetSettings();

            toastService.ShowSuccess("Settings Reset");

            var timer = new System.Threading.Timer(new System.Threading.TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 2000, 2000);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
}