@using Microsoft.AspNetCore.Components.Routing
<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">ASCOM.Alpaca.Simulators</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            @foreach (var key in ASCOM.Alpaca.DeviceManager.Cameras)
            {
                <NavLink class="nav-link" href=@GetSetupURL("camera", key.Key) Match="NavLinkMatch.All">
                    <span class="oi oi-camera-slr" aria-hidden="true"></span> @GetDisplayName("Camera", key.Key)
                </NavLink>
            }
        </li>
        <li class="nav-item px-3">
            @foreach (var key in ASCOM.Alpaca.DeviceManager.CoverCalibrators)
            {
                <NavLink class="nav-link" href=@GetSetupURL("covercalibrator", key.Key) Match="NavLinkMatch.All">
                    <span class="oi oi-contrast" aria-hidden="true"></span> @GetDisplayName("CoverCalibrator", key.Key)
                </NavLink>
            }
        </li>
        <li class="nav-item px-3">
            @foreach (var key in ASCOM.Alpaca.DeviceManager.Domes)
            {
                <NavLink class="nav-link" href=@GetSetupURL("dome", key.Key) Match="NavLinkMatch.All">
                    <span class="oi oi-aperture" aria-hidden="true"></span> @GetDisplayName("Dome", key.Key)
                </NavLink>
            }
        </li>
        <li class="nav-item px-3">

            @foreach (var key in ASCOM.Alpaca.DeviceManager.FilterWheels)
            {
                <NavLink class="nav-link" href=@GetSetupURL("filterwheel", key.Key) Match="NavLinkMatch.All">
                    <span class="oi oi-sun" aria-hidden="true"></span> @GetDisplayName("Filter Wheel", key.Key)
                </NavLink>
            }
        </li>
        <li class="nav-item px-3">

            @foreach (var key in ASCOM.Alpaca.DeviceManager.Focusers)
            {
                <NavLink class="nav-link" href=@GetSetupURL("focuser", key.Key) Match="NavLinkMatch.All">
                    <span class="oi oi-elevator" aria-hidden="true"></span> @GetDisplayName("Focuser", key.Key)
                </NavLink>
            }
        </li>
        <li class="nav-item px-3">
            @foreach (var key in ASCOM.Alpaca.DeviceManager.ObservingConditions)
            {
                <NavLink class="nav-link" href=@GetSetupURL("observingconditions", key.Key) Match="NavLinkMatch.All">
                    <span class="oi oi-cloudy" aria-hidden="true"></span> @GetDisplayName("ObservingConditions", key.Key)
                </NavLink>
            }
        </li>
        <li class="nav-item px-3">
            @foreach (var key in ASCOM.Alpaca.DeviceManager.Rotators)
            {
                <NavLink class="nav-link" href=@GetSetupURL("rotator", key.Key) Match="NavLinkMatch.All">
                    <span class="oi oi-loop-circular" aria-hidden="true"></span> @GetDisplayName("Rotator", key.Key)
                </NavLink>
            }
        </li>
        <li class="nav-item px-3">
            @foreach (var key in ASCOM.Alpaca.DeviceManager.SafetyMonitors)
            {
                <NavLink class="nav-link" href=@GetSetupURL("safetymonitor", key.Key) Match="NavLinkMatch.All">
                    <span class="oi oi-ban" aria-hidden="true"></span> @GetDisplayName("SafetyMonitor", key.Key)
                </NavLink>
            }
        </li>
        <li class="nav-item px-3">
            @foreach (var key in ASCOM.Alpaca.DeviceManager.Switches)
            {
                <NavLink class="nav-link" href=@GetSetupURL("switch", key.Key) Match="NavLinkMatch.All">
                    <span class="oi oi-circle-check" aria-hidden="true"></span> @GetDisplayName("Switch", key.Key)
                </NavLink>
            }
        </li>
        <li class="nav-item px-3">
            @foreach (var key in ASCOM.Alpaca.DeviceManager.Telescopes)
            {
                <NavLink class="nav-link" href=@GetSetupURL("Telescope", key.Key) Match="NavLinkMatch.All">
                    <span class="oi oi-star" aria-hidden="true"></span> @GetDisplayName("Telescope", key.Key)
                </NavLink>
            }
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="setup" Match="NavLinkMatch.All">
                <span class="oi oi-wrench" aria-hidden="true"></span> Driver Setup
            </NavLink>
        </li>
        @if (ServerSettings.UpdateChecker.UpdateAvailable)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="update" Match="NavLinkMatch.All">
                    <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Update Available
                </NavLink>
            </li>
        }
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="about" Match="NavLinkMatch.All">
                <span class="oi oi-question-mark" aria-hidden="true"></span> About
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <input type="checkbox" @bind="EnableShutdown">
            <button @onclick="Shutdown" disabled="@AllowShutdown" class="button-transparent" title="Check to unlock"> <span class="oi oi-power-standby" aria-hidden="true"></span>Shutdown</button>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    bool EnableShutdown
    {
        get;
        set;
    } = false;

    bool AllowShutdown
    {
        get => !EnableShutdown;
    }

    string GetSetupURL(string dev, int index)
    {
        return $"control/v1/{dev}/{index}/";
    }

    string GetDisplayName(string dev, int index)
    {
        if(index == 0)
        {
            return dev;
        }
        return $"{dev} - {index}";
    }

    void Shutdown()
    {
        try
        {
            Startup.Lifetime.StopApplication();
        }
        catch (Exception)
        {
            
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}